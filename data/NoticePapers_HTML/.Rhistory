# Here sup mataches questionNumber, and the supText provides actual content of each sup
# We can split the supText and merge it again with sup, and thus we can know the acutal
# sup of each questionNumber
# keyID of each motion
# TODO: need to aviod sup
keyIDCheck <- str_extract(number[8:length(number)], "[A-Z][-][0-9]+")
# sitting date
sittingDate <- str_extract(number[6], "[A-Z][a-z]+, [A-Z][a-z]+ [0-9]{1,2}, [0-9]{4}")
# everything on the websie, as well as the actual content that we are interested in
everything <- test %>% html_nodes("td")
content <- test %>% html_nodes(".ItemPara")
contentText <- content %>% html_text()
# All the headings
# TODO: need to be matched with number
heading <- everything %>% html_nodes(".RubricTitle") %>% html_text()
# check number of questions
if(length(everything) == 0) {
return(NULL)
}
# output
View(supText)
output <- data.frame(contentText,sup)
output <- output %>% separate(contentText, into=c("keyID","date","people","content"), sep="[ ][—][ ]")
output$keyID[output$keyID!=keyIDCheck] <- NA
for (i in 1:length(supText)){
output$sup[output$sup==substr(supText, ,1)] <- substr(supText,2)
}
## About the foot note, here we only can detect if the footnote exists or not
## If would be better if we can remove it from text
## And put it as a numeric varibale in Sup.
## We need to note what this sup means at the same time
sup <- content %>% html_nodes(".Footnote , sup") %>% html_text()
supText <- test %>% html_nodes(".Footnote") %>%  html_text()
supText <- trimws(supText, c("both"))
# output
output <- data.frame(contentText,sup)
output <- output %>% separate(contentText, into=c("keyID","date","people","content"), sep="[ ][—][ ]")
output$keyID[output$keyID!=keyIDCheck] <- NA
for (i in 1:length(supText)){
output$sup[output$sup==substr(supText, ,1)] <- substr(supText,2)
}
output$sup[output$sup==substr(supText, ,1)] <- substr(supText,2,)
output$sup[output$sup==substr(supText, ,1)] <- substring(supText,2,)
output$sup[output$sup==substr(supText,1,2)] <- substring(supText,2,)
output$sup[output$sup==substr(supText[i],1,2)] <- substring(supText[i],2,)
output$keyID[output$keyID!=keyIDCheck] <- NA
for (i in 1:length(supText)){
output$sup[output$sup==substr(supText[i],1,2)] <- substring(supText[i],2,)
}
output$sup[output$sup==substr(temp,1,2)] <- substr(temp,2,length(temp))
for (i in 1:length(supText)){
temp=supText[i]
output$sup[output$sup==substr(temp,1,2)] <- substr(temp,2,length(temp))
}
output$sup[output$sup==substr(temp,1,3)] <- substr(temp,2,length(temp))
output$sup[output$sup==substr(temp,1,2)] <- temp
supText[1]
supText[1,1]
supText[1][1]
substr(supText[1],1,2)
substr(supText[1],1,1)
output$sup[output$sup==substr(temp,1,1)] <- temp
output$sup[output$sup==substr(temp,1,1)] <- supText[i]
output$sup[output$sup==substr(temp,1,1)] <- supText[i][1]
n=length(temp)
output$sup[output$sup==substr(temp,1,1)] <- substr(temp,2,)
for (i in 1:length(supText)){
temp=supText[i]
n=length(temp)
output$sup[output$sup==substr(temp,1,1)] <- substr(temp,2,n)
}
substr(supText[1],2,n)
substr(supText[1],2,100)
length(supText[1])
substr(supText[1],2,nchar(supText[1]))
output$sup[output$sup==substr(temp,1,1)] <- substr(temp,2,nchar(temp))
for (i in 1:length(supText)){
temp=supText[i]
output$sup[output$sup==substr(temp,1,1)] <- substr(temp,2,nchar(temp))
}
for (i in 1:length(supText)){
temp <- supText[i]
text <- substr(temp,2,nchar(temp))
output$sup[output$sup==substr(temp,1,1)] <- text
}
output <- data.frame(contentText,sup)
output <- output %>% separate(contentText, into=c("keyID","date","people","content"), sep="[ ][—][ ]")
output$keyID[output$keyID!=keyIDCheck] <- NA
for (i in 1:length(supText)){
temp <- supText[i]
text <- substr(temp,2,nchar(temp))
output$sup[output$sup==substr(temp,1,1)] <- text
}
for (i in 1:length(supText)){
temp <- supText[i]
text <- substr(temp,2,nchar(temp))
for (j in 1:length(output$sup)){
if (output$sup==substr(temp,1,1)){
output$sup<- text
}
}
}
output <- data.frame(contentText,sup)
output <- output %>% separate(contentText, into=c("keyID","date","people","content"), sep="[ ][—][ ]")
output$keyID[output$keyID!=keyIDCheck] <- NA
for (i in 1:length(supText)){
temp <- supText[i]
text <- substr(temp,2,nchar(temp))
for (j in 1:length(output$sup)){
if (output$sup[j]==substr(temp,1,1)){
output$sup<- text
}
}
}
# output
output <- data.frame(contentText,sup)
output <- output %>% separate(contentText, into=c("keyID","date","people","content"), sep="[ ][—][ ]")
output$keyID[output$keyID!=keyIDCheck] <- NA
for (i in 1:length(supText)){
temp <- supText[i]
text <- substr(temp,2,nchar(temp))
for (j in 1:length(output$sup)){
if (output$sup[j]==substr(temp,1,1)){
output$sup[j]<- text
} else {
output$sup[j]<- NA
}
}
}
warning()
# output
output <- data.frame(contentText,sup)
output <- output %>% separate(contentText, into=c("keyID","date","people","content"), sep="[ ][—][ ]")
output$keyID[output$keyID!=keyIDCheck] <- NA
for (i in 1:length(supText)){
temp <- supText[i]
text <- substr(temp,2,nchar(temp))
for (j in 1:length(output$sup)){
if (output$sup[j]==substr(temp,1,1)){
output$sup[j] <- text
} else {
output$sup[j] <- NA
}
}
}
summary(output$sup)
# output
output <- data.frame(contentText,sup)
summary(output$sup)
output <- output %>% separate(contentText, into=c("keyID","date","people","content"), sep="[ ][—][ ]") %>% as.character(output$sup)
output$keyID[output$keyID!=keyIDCheck] <- NA
output$keyID[output$keyID!=keyIDCheck] <- NA
output$sup <- as.character(output$sup)
output <- data.frame(contentText,sup)
output <- output %>% separate(contentText, into=c("keyID","date","people","content"), sep="[ ][—][ ]")
output$keyID[output$keyID!=keyIDCheck] <- NA
output$sup <- as.character(output$sup)
for (i in 1:length(supText)){
temp <- supText[i]
text <- substr(temp,2,nchar(temp))
for (j in 1:length(output$sup)){
if (output$sup[j]==substr(temp,1,1)){
output$sup[j] <- text
} else {
output$sup[j] <- NA
}
}
}
summary(output$sup)
output <- output %>% separate(contentText, into=c("keyID","date","people","content"), sep="[ ][—][ ]")
# output
output <- data.frame(contentText,sup)
output$sup <- as.character(output$sup)
output <- output %>% separate(contentText, into=c("keyID","date","people","content"), sep="[ ][—][ ]")
output$keyID[output$keyID!=keyIDCheck] <- NA
output$sup <- as.character(output$sup)
output$sup[2]
summary(substr(supText[i],1,1))
output$sup[2]==summary(substr(supText[i],1,1))
output$sup[2]==substr(supText[i],1,1)
for (i in 1:length(supText)){
for (j in 1:length(output$sup)){
if (output$sup[j]==substr(supText[i],1,1)){
output$sup[j] <- substr(supText[i],2,nchar(supText[i]))
} else {
output$sup[j] <- NA
}
}
}
for (i in 1:length(supText)){
for (j in 1:length(output$sup)){
if (output$sup[j] == substr(supText[i],1,1)){
output$sup[j] <- substr(supText[i],2,nchar(supText[i]))
} else {
output$sup[j] <- NA
}
}
}
length(output$sup)
length(supText)
output$sup[1] == substr(supText[2],1,1)
output$sup[1] == substr(supText[i],1,1)
summary(output$sup)
output$sup[1] == substr(supText[i],1,1)
output$sup[1]==substr(supText[i],1,1)
output$sup[4]==substr(supText[i],1,1)
# output
output <- data.frame(contentText,sup)
output <- output %>% separate(contentText, into=c("keyID","date","people","content"), sep="[ ][—][ ]")
output$keyID[output$keyID!=keyIDCheck] <- NA
output$sup <- as.character(output$sup)
output$sup[4]==substr(supText[i],1,1)
for (i in 1:length(supText)){
for (j in 1:length(output$sup)){
if (output$sup[j] == substr(supText[i],1,1)){
output$sup[j] <- substr(supText[i],2,nchar(supText[i]))
}
}
}
output <- data.frame(contentText,sup)
output <- output %>% separate(contentText, into=c("keyID","date","people","content"), sep="[ ][—][ ]")
output$keyID[output$keyID!=keyIDCheck] <- NA
output$sup <- as.character(output$sup)
for (i in 1:length(supText)){
for (j in 1:length(output$sup)){
if (output$sup[j] == substr(supText[i],1,1)){
output$sup[j] <- substr(supText[i],2,nchar(supText[i]))
} else {
output$sup[j] <- NA
}
}
}
output <- data.frame(contentText,sup)
output <- output %>% separate(contentText, into=c("keyID","date","people","content"), sep="[ ][—][ ]")
output$keyID[output$keyID!=keyIDCheck] <- NA
output$sup <- as.character(output$sup)
for (i in 1:length(supText)){
for (j in 1:length(output$sup)){
if (output$sup[j] == substr(supText[i],1,1)){
output$sup[j] <- substr(supText[i],2,nchar(supText[i]))
}
}
}
supIndex <- sup
# output
output <- data.frame(contentText,supIndex,sup)
output <- output %>% separate(contentText, into=c("keyID","date","people","content"), sep="[ ][—][ ]")
output$keyID[output$keyID!=keyIDCheck] <- NA
output$sup <- as.character(output$sup)
for (i in 1:length(supText)){
for (j in 1:length(output$sup)){
if (output$sup[j] == substr(supText[i],1,1)){
output$sup[j] <- substr(supText[i],2,nchar(supText[i]))
}
}
}
#######################
# set working directory
# load data
# and load libraries
#######################
# remove objects
rm(list=ls())
# detach all libraries
detachAllPackages <- function() {
basic.packages <- c("package:stats","package:graphics","package:grDevices","package:utils","package:datasets","package:methods","package:base")
package.list <- search()[ifelse(unlist(gregexpr("package:",search()))==1,TRUE,FALSE)]
package.list <- setdiff(package.list,basic.packages)
if (length(package.list)>0)  for (package in package.list) detach(package, character.only=TRUE)
}
detachAllPackages()
# set working directory
setwd('~/Documents/GitHub/CompLegFall2019/data/NoticePapers_HTML/')
# load libraries
pkgTest <- function(pkg){
new.pkg <- pkg[!(pkg %in% installed.packages()[, "Package"])]
if (length(new.pkg))
install.packages(new.pkg, dependencies = TRUE)
sapply(pkg, require, character.only = TRUE)
}
lapply(c("stringr", "dplyr", "plyr", "tidyverse", "rvest", "zoo"), pkgTest)
#################################
# function to parse HTML
#################################
parse_HTML <- function(file) {
# parliament
info <- str_split(file, "_|\\.")
info <- unlist(info)
# read in HTML
html <- read_html(file)
# heading
h <- html %>% html_nodes("b") %>% html_text()
sitting_date <- str_extract(h[6], "[A-Z][a-z]+, [A-Z][a-z]+ [0-9]{1,2}, [0-9]{4}")
# text
td <- html %>% html_nodes("td")
td_text <- td %>% html_text()
# footnote
sup <- td %>% html_node("b") %>% as.character()
sup <- as.numeric(str_detect(sup, "sup>2<"))
# class
class <- td %>% html_attr("class")
# headings
h3 <- td %>% html_node("h3") %>% html_text()
h4 <- td %>% html_node("h4") %>% html_text()
h4[h3 == "Private Members' Business"] <- "Private Members' Business"
# paragraph
p <- td %>% html_node("p") %>% html_text()
# text
td <- td %>% html_text()
# check number of questions
if(length(td) == 0) {
return(NULL)
}
# make a data frame
out <- data.frame(key_ID = 1:length(td),
parliament_number = info[3],
session_number = info[4],
chamber_number = 1,
sitting_number = info[5],
sitting_date = sitting_date,
heading = h4,
class = class,
footnote = sup,
text = td,
paragraph = p,
stringsAsFactors = FALSE)
# return data frame
return(out)
}
##################################################
# read in data
##################################################
# file names
files <- list.files(pattern="*.html", full.names=TRUE, recursive=FALSE)
# parse XML
out <- alply(.data = files, .margins = 1, .fun = parse_HTML, .progress = "text", .inform = TRUE)
# stack data frames
out <- do.call("rbind", out)
# data frame
dat <- out
View(out)
output <- data.frame(contentText,
supIndex,
sup,
parliament_number = info[3],
session_number = info[4],
chamber_number = 1,
sitting_number = info[5],
sitting_date = sitting_date)
test <- read_html("notice_papers_41_2_2.html")
number <- test %>% html_nodes("b") %>% html_text()
## About the foot note, here we only can detect if the footnote exists or not
## If would be better if we can remove it from text
## And put it as a numeric varibale in Sup.
## We need to note what this sup means at the same time
sup <- content %>% html_nodes(".Footnote , sup") %>% html_text()
supIndex <- sup
supText <- test %>% html_nodes(".Footnote") %>%  html_text()
supText <- trimws(supText, c("both"))
# Here sup mataches questionNumber, and the supText provides actual content of each sup
# We can split the supText and merge it again with sup, and thus we can know the acutal
# sup of each questionNumber
# keyID of each motion
# TODO: need to aviod sup
keyIDCheck <- str_extract(number[8:length(number)], "[A-Z][-][0-9]+")
# sitting date
sittingDate <- str_extract(number[6], "[A-Z][a-z]+, [A-Z][a-z]+ [0-9]{1,2}, [0-9]{4}")
# everything on the websie, as well as the actual content that we are interested in
everything <- test %>% html_nodes("td")
content <- test %>% html_nodes(".ItemPara")
contentText <- content %>% html_text()
# All the headings
# TODO: need to be matched with number
heading <- everything %>% html_nodes(".RubricTitle") %>% html_text()
# check number of questions
if(length(everything) == 0) {
return(NULL)
}
# output
output <- data.frame(contentText,
supIndex,
sup,
parliament_number = info[3],
session_number = info[4],
chamber_number = 1,
sitting_number = info[5],
sitting_date = sitting_date)
output <- output %>% separate(contentText, into=c("keyID","date","people","content"), sep="[ ][—][ ]")
output$keyID[output$keyID!=keyIDCheck] <- NA
output$sup <- as.character(output$sup)
for (i in 1:length(supText)){
for (j in 1:length(output$sup)){
if (output$sup[j] == substr(supText[i],1,1)){
output$sup[j] <- substr(supText[i],2,nchar(supText[i]))
}
}
}
output <- data.frame(contentText,
supIndex,
sup,
parliament_number = info[3],
session_number = info[4],
chamber_number = 1,
sitting_number = info[5],
sitting_date = sitting_date)
test <- read_html("notice_papers_41_2_2.html")
number <- test %>% html_nodes("b") %>% html_text()
## About the foot note, here we only can detect if the footnote exists or not
## If would be better if we can remove it from text
## And put it as a numeric varibale in Sup.
## We need to note what this sup means at the same time
sup <- content %>% html_nodes(".Footnote , sup") %>% html_text()
supIndex <- sup
supText <- test %>% html_nodes(".Footnote") %>%  html_text()
supText <- trimws(supText, c("both"))
# keyID of each motion
# TODO: need to aviod sup
keyIDCheck <- str_extract(number[8:length(number)], "[A-Z][-][0-9]+")
sup <- content %>% html_nodes(".Footnote , sup") %>% html_text()
supIndex <- sup
supText <- test %>% html_nodes(".Footnote") %>%  html_text()
supText <- trimws(supText, c("both"))
# keyID of each motion
# TODO: need to aviod sup
keyIDCheck <- str_extract(number[8:length(number)], "[A-Z][-][0-9]+")
# sitting date
sittingDate <- str_extract(number[6], "[A-Z][a-z]+, [A-Z][a-z]+ [0-9]{1,2}, [0-9]{4}")
# everything on the websie, as well as the actual content that we are interested in
everything <- test %>% html_nodes("td")
# keyID of each motion
# TODO: need to aviod sup
keyIDCheck <- str_extract(number[8:length(number)], "[A-Z][-][0-9]+")
# sitting date
sittingDate <- str_extract(number[6], "[A-Z][a-z]+, [A-Z][a-z]+ [0-9]{1,2}, [0-9]{4}")
# sitting date
sittingDate <- str_extract(number[6], "[A-Z][a-z]+, [A-Z][a-z]+ [0-9]{1,2}, [0-9]{4}")
# everything on the websie, as well as the actual content that we are interested in
everything <- test %>% html_nodes("td")
content <- test %>% html_nodes(".ItemPara")
contentText <- content %>% html_text()
# All the headings
# TODO: need to be matched with number
heading <- everything %>% html_nodes(".RubricTitle") %>% html_text()
if(length(everything) == 0) {
return(NULL)
}
output <- data.frame(contentText,
supIndex,
sup,
parliament_number = info[3],
session_number = info[4],
chamber_number = 1,
sitting_number = info[5],
sitting_date = sitting_date)
output <- output %>% separate(contentText, into=c("keyID","date","people","content"), sep="[ ][—][ ]")
output$keyID[output$keyID!=keyIDCheck] <- NA
output$sup <- as.character(output$sup)
output <- data.frame(contentText,
supIndex,
sup,
parliament_number = info[3],
session_number = info[4],
chamber_number = 1,
sitting_number = info[5],
sitting_date = sitting_date)
info <- str_split(file, "_|\\.")
info <- unlist(info)
test <- read_html("notice_papers_41_2_2.html")
number <- test %>% html_nodes("b") %>% html_text()
info <- str_split(file, "_|\\.")
info <- str_split(test, "_|\\.")
files <- list.files(pattern="*.html", full.names=TRUE, recursive=FALSE)
info <- str_split(test, "_|\\.")
info <- unlist(info)
info <- str_split(files, "_|\\.")
info <- unlist(info)
info <- str_split(files, "_|\\.")
info <- unlist(info)
output <- data.frame(contentText,
supIndex,
sup,
parliament_number = info[3],
session_number = info[4],
chamber_number = 1,
sitting_number = info[5],
sitting_date = sitting_date)
output <- data.frame(contentText,
supIndex,
sup,
parliament_number = info[3],
sessionNumber = info[4],
chamberNumber = 1,
sittingNumber = info[5],
sittingDate = sittingDate)
output <- data.frame(contentText,
supIndex,
sup,
parliamentNumber = info[3],
sessionNumber = info[4],
chamberNumber = 1,
sittingNumber = info[5],
sittingDate = sittingDate)
output <- output %>% separate(contentText, into=c("keyID","introDate","people","content"), sep="[ ][—][ ]")
output$keyID[output$keyID!=keyIDCheck] <- NA
output$sup <- as.character(output$sup)
for (i in 1:length(supText)){
for (j in 1:length(output$sup)){
if (output$sup[j] == substr(supText[i],1,1)){
output$sup[j] <- substr(supText[i],2,nchar(supText[i]))
}
}
}
