# Use a line graph to display the evolution through time of the proportion of all given names that correspond to one of these four names (one line per name).
x <- babynames %>%
filter(year == 2017) %>%
select(name, 1:4)
x <- babynames %>%
filter(year == 2017) %>%
select(name, 1:4)
View(x)
top_names <- babynames %>%
filter(!name %in% top_names_2017)
View(top_names)
# Use a line graph to display the evolution through time of the proportion of all given names that correspond to one of these four names (one line per name).
top_names <- babynames %>%
filter(name %in% top_names_2017)
View(y)
View(top_names)
top_names_2017 <- as.character(babynames %>%
filter(year == 2017) %>%
top_n(4) %>%
select(name))
top_names_2017 <- as.character(babynames %>%
filter(year == 2017) %>%
top_n(n,4) %>%
select(name))
# Find the four most given names in 2017 (across both sexes). Store these four names into a character vector and call that vector top_names_2017
top_names_2017 <- as.character(babynames %>%
filter(year == 2017) %>%
top_n(prop,4) %>%
select(name))
# Find the four most given names in 2017 (across both sexes). Store these four names into a character vector and call that vector top_names_2017
top_names_2017 <- as.character(babynames %>%
filter(year == 2017) %>%
top_n(4, prop) %>%
select(name))
# Find the four most given names in 2017 (across both sexes). Store these four names into a character vector and call that vector top_names_2017
top_names_2017 <- as.character(babynames %>%
filter(year == 2017) %>%
top_n(4, n) %>%
select(name))
# Use a line graph to display the evolution through time of the proportion of all given names that correspond to one of these four names (one line per name).
top_names <- babynames %>%
filter(name %in% c("Emma","Olivia"))
View(y)
library(babynames)
library(tidyverse)
library(gapminder)
# For the year 2017, find the most common name among females.
babynames %>%
filter(year == 2017) %>%
filter(sex == "F" ) %>%
arrange(desc(n))
# For the year 1982, find the number of males.
babynames %>%
filter(year == 1982) %>%
count(sex == "M")
# For each year, find the number of distinct male and female names given in that year.
babynames %>%
group_by(year) %>%
distinct(name) %>%
count()
# Find the four most given names in 2017 (across both sexes). Store these four names into a character vector and call that vector top_names_2017
top_names_2017 <- as.character(babynames %>%
filter(year == 2017) %>%
top_n(4, n) %>%
select(name))
# Use a line graph to display the evolution through time of the proportion of all given names that correspond to one of these four names (one line per name).
top_names <- babynames %>%
filter(name %in% c("Emma","Olivia"))
qplot(, , )
View(top_names)
filter(name %in% c("Emma","Olivia","Liam","Noah"))
top_names <- babynames %>%
group_by(year)
filter(name %in% c("Emma","Olivia","Liam","Noah"))
# Use a line graph to display the evolution through time of the proportion of all given names that correspond to one of these four names (one line per name).
top_names <- babynames %>%
group_by(year) %>%
filter(name %in% c("Emma","Olivia","Liam","Noah"))
View(top_names)
top_names <- babynames %>%
group_by(year) %>%
filter(name %in% c("Emma","Olivia","Liam","Noah"))
babynames %>%
filter(year == 2017) %>%
top_n(4, n) %>%
select(name)
# Use a line graph to display the evolution through time of the proportion of all given names that correspond to one of these four names (one line per name).
top_names <- babynames %>%
group_by(year) %>%
filter(name %in% top_names_2017)
qplot(year, prop, top_names, color=name)
qplot(year, prop, data = top_names, geom = 'line', color = name)
top_names <- babynames %>%
group_by(year) %>%
filter(name %in% top_names_2017)
# Use a line graph to display the evolution through time of the proportion of all given names that correspond to one of these four names (one line per name).
top_names <- babynames %>%
group_by(year) %>%
filter(name %in% c("Emma","Olivia","Liam","Noah"))
qplot(year, prop, data = top_names, geom = 'line', color = name)
# Find the four most given names in 2017 (across both sexes). Store these four names into a character vector and call that vector top_names_2017
top_names_2017 <- as.character(babynames %>%
filter(year == 2017) %>%
top_n(4, n) %>%
select(name)
<-c("Emma","Olivia","Liam","Noah"))
# Find the four most given names in 2017 (across both sexes). Store these four names into a character vector and call that vector top_names_2017
top_names_2017 <- as.character(babynames %>%
filter(year == 2017) %>%
top_n(4, n) %>%
select(name) %>%
c("Emma","Olivia","Liam","Noah"))
top_names_2017 <- as.character(babynames %>%
filter(year == 2017) %>%
top_n(4, n) %>%
select(name)
# Find the four most given names in 2017 (across both sexes). Store these four names into a character vector and call that vector top_names_2017
top_names_2017 <- as.character(babynames %>%
filter(year == 2017) %>%
top_n(4, n) %>%
select(name))
# Find the four most given names in 2017 (across both sexes). Store these four names into a character vector and call that vector top_names_2017
top_names_2017 <- as.character(babynames %>%
filter(year == 2017) %>%
top_n(4, n) %>%
select(name) )
# Use a line graph to display the evolution through time of the proportion of all given names that correspond to one of these four names (one line per name).
top_names <- babynames %>%
group_by(year) %>%
filter(name %in% c("Emma","Olivia","Liam","Noah"))
qplot(year, prop, data = top_clean_names, geom = 'line', color = name)
# The sudden drops in the previous graph come from the fact that it depicts two observations for each year. For each name, the graph represents the number of females and males who were given the name. (Each name is predominantly given to people of a given sex. Unusual name assignments may be part intential, and part results of errors in recording people’s sexes)
top_clean_names <- top_names %>%
filter(prop > 0.0002)
qplot(year, prop, data = top_clean_names, geom = 'line', color = name)
canada_commons_members_parl42 <- read.csv("~/Documents/GitHub/CompLegFall2019/data/canadaTextParsing/Members (CSV)/canada_commons_members_parl42.csv", comment.char="#")
View(canada_commons_members_parl42)
library(babynames)
library(tidyverse)
library(gapminder)
# For the year 2017, find the most common name among females.
babynames %>%
filter(year == 2017) %>%
filter(sex == "F" ) %>%
arrange(desc(n))
# For the year 1982, find the number of males.
babynames %>%
filter(year == 1982) %>%
count(sex == "M")
# For each year, find the number of distinct male and female names given in that year.
babynames %>%
group_by(year) %>%
distinct(name) %>%
count()
# Find the four most given names in 2017 (across both sexes). Store these four names into a character vector and call that vector top_names_2017
top_names_2017 <- as.character(babynames %>%
filter(year == 2017) %>%
top_n(4, n) %>%
select(name) )
# Use a line graph to display the evolution through time of the proportion of all given names that correspond to one of these four names (one line per name).
top_names <- babynames %>%
group_by(year) %>%
filter(name %in% top_names_2017)
qplot(year, prop, data = top_names, geom = 'line', color = name)
# The sudden drops in the previous graph come from the fact that it depicts two observations for each year. For each name, the graph represents the number of females and males who were given the name. (Each name is predominantly given to people of a given sex. Unusual name assignments may be part intential, and part results of errors in recording people’s sexes)
top_clean_names <- top_names %>%
filter(prop > 0.0002)
qplot(year, prop, data = top_clean_names, geom = 'line', color = name)
# Find the four most given names in 2017 (across both sexes). Store these four names into a character vector and call that vector top_names_2017
top_names_2017 <- babynames %>%
filter(year == 2017) %>%
top_n(4, n) %>%
select(name)
View(top_names_2017)
# Use a line graph to display the evolution through time of the proportion of all given names that correspond to one of these four names (one line per name).
top_names <- babynames %>%
group_by(year) %>%
filter(name %in% top_names_2017)
qplot(year, prop, data = top_names, geom = 'line', color = name)
library(babynames)
library(tidyverse)
library(gapminder)
# For the year 2017, find the most common name among females.
babynames %>%
filter(year == 2017) %>%
filter(sex == "F" ) %>%
arrange(desc(n))
# For the year 1982, find the number of males.
babynames %>%
filter(year == 1982) %>%
count(sex == "M")
# For each year, find the number of distinct male and female names given in that year.
babynames %>%
group_by(year) %>%
distinct(name) %>%
count()
# Find the four most given names in 2017 (across both sexes). Store these four names into a character vector and call that vector top_names_2017
top_names_2017 <- as.character(babynames %>%
filter(year == 2017) %>%
top_n(4, n) %>%
select(name) )
# Use a line graph to display the evolution through time of the proportion of all given names that correspond to one of these four names (one line per name).
top_names <- babynames %>%
group_by(year) %>%
filter(name %in% c("Emma","Olivia","Liam","Noah"))
qplot(year, prop, data = top_names, geom = 'line', color = name)
# The sudden drops in the previous graph come from the fact that it depicts two observations for each year. For each name, the graph represents the number of females and males who were given the name. (Each name is predominantly given to people of a given sex. Unusual name assignments may be part intential, and part results of errors in recording people’s sexes)
top_clean_names <- top_names %>%
filter(prop > 0.0002)
qplot(year, prop, data = top_clean_names, geom = 'line', color = name)
babynames
library(babynames)
library(tidyverse)
library(gapminder)
View(babynames)
# Find the four most given names in 2017 (across both sexes). Store these four names into a character vector and call that vector top_names_2017
top_names_2017 <- as.character(babynames %>%
group_by(sex);
filter(year == 2017) %>%
top_n(4, n) %>%
select(name) )
# Find the four most given names in 2017 (across both sexes). Store these four names into a character vector and call that vector top_names_2017
top_names_2017 <- as.character(babynames %>%
group_by(sex) %>%
filter(year == 2017 | sex) %>%
top_n(4, n) %>%
select(name) )
# Find the four most given names in 2017 (across both sexes). Store these four names into a character vector and call that vector top_names_2017
top_names_2017 <- as.character(babynames %>%
group_by(sex) %>%
filter(year == 2017) %>%
top_n(4, n) %>%
select(name|sex) )
# Find the four most given names in 2017 (across both sexes). Store these four names into a character vector and call that vector top_names_2017
top_names_2017 <- as.character(babynames %>%
group_by(sex) %>%
filter(year == 2017) %>%
top_n(4, n) %>%
select(name & sex) )
# Find the four most given names in 2017 (across both sexes). Store these four names into a character vector and call that vector top_names_2017
top_names_2017 <- as.character(babynames %>%
group_by(sex) %>%
filter(year == 2017) %>%
top_n(4, n) %>%
select(name) )
# Find the four most given names in 2017 (across both sexes). Store these four names into a character vector and call that vector top_names_2017
top_names_2017 <- as.character(babynames %>%
filter(year == 2017) %>%
top_n(4, n) %>%
select(name, sex) )
babynames %>%
filter(year == 2017) %>%
top_n(4, n) %>%
select(name, sex)
# vote type
votes$type <- "Missing"
votes$type[votes$bill_number != "None" & str_detect(votes$description, "^2nd reading")] <- "Bill: second reading"
votes$type[votes$bill_number != "None" & str_detect(votes$description, "^3rd reading")] <- "Bill: third reading"
votes$type[votes$bill_number != "None" & str_detect(votes$description, "^Concurrence at report stage")] <- "Bill: concurrence at report stage"
votes$type[votes$bill_number != "None" & str_detect(votes$description, "\\(report stage (sub)?amendment")] <- "Bill: amendment at report stage"
votes$type[votes$bill_number != "None" & str_detect(votes$description, "^Time allocation for Bill")] <- "Bill: time allocation"
votes$type[votes$bill_number != "None" & str_detect(votes$description, "^Motion respecting Senate amendments to Bill")] <- "Bill: motion respecting Senate amendments"
votes$type[votes$bill_number != "None" & str_detect(votes$description, "\\(referral (to a committee|of subject)")] <- "Bill: referral to a committee"
votes$type[votes$bill_number != "None" & str_detect(votes$description, "\\(recommittal to a committee")] <- "Bill: recommittal to a committee"
votes$type[votes$bill_number != "None" & str_detect(votes$description, "\\(hoist amendment")] <- "Bill: hoist amendment"
votes$type[votes$bill_number == "None" & str_detect(votes$description, "^Opposition Motion")] <- "Motion (opposition)"
votes$type[votes$bill_number == "None" & str_detect(votes$description, "^Government Business")] <- "Government business"
votes$type[votes$bill_number == "None" & str_detect(votes$description, "^Private Members' Business")] <- "Motion (private members' business)"
votes$type[votes$bill_number == "None" & str_detect(votes$description, "^Appointment of an officer")] <- "Other (appointment of an officer)"
votes$type[votes$bill_number == "None" & str_detect(votes$description, "Report of the (Standing|Special)")] <- "Other (report)"
votes$type[votes$bill_number == "None" & str_detect(votes$description, "^Budgetary policy")] <- "Other (budgetary policy)"
votes$type[votes$bill_number == "None" & str_detect(votes$description, "^Motion to adjourn the debate")] <- "Motion (to adjourn the debate)"
votes$type[votes$bill_number == "None" & str_detect(votes$description, "^Motion for closure")] <- "Motion (for closure)"
votes$type[votes$bill_number == "None" & str_detect(votes$description, "^Motion to adjourn the House")] <- "Motion (to adjourn the House)"
votes$type[votes$bill_number == "None" & str_detect(votes$description, "^Motion to hear another Member")] <- "Motion (to hear another member)"
votes$type[votes$bill_number == "None" & str_detect(votes$description, "^Motion to proceed to Orders of the Day")] <- "Motion (to proceed to Orders of the Day)"
votes$type[votes$bill_number == "None" & str_detect(votes$description, "^Motion to restore a vote in estimates")] <- "Motion (to restore a vote in estimates)"
votes$type[votes$bill_number == "None" & str_detect(votes$description, "^Motion for the production of papers")] <- "Motion (for the production of papers)"
votes$type[votes$bill_number == "None" & str_detect(votes$description, "^Motion respecting the proceedings and business of the House")] <- "Motion (respecting the proceedings and business of the House)"
votes$type[votes$bill_number == "None" & str_detect(votes$description, "^Ways and Means motion")] <- "Motion (Ways and Means)"
votes$type[votes$bill_number == "None" & str_detect(votes$description, "^Referral of a question of privilege to committee")] <- "Other (referral of a question of privilage to a committee)"
votes$type[votes$bill_number == "None" & str_detect(votes$description, "^Address in Reply to the Speech from the Throne")] <- "Other (address in reply to the Speech from the Throne)"
votes$type[votes$bill_number == "None" & str_detect(votes$description, "^Concurrence in an opposed item")] <- "Concurrence (in an opposed item)"
votes$type[votes$bill_number == "None" & str_detect(votes$description, "^Concurrence in estimates")] <- "Concurrence (in estimates)"
votes$type[votes$bill_number == "None" & str_detect(votes$description, "^Concurrence in Interim Supply")] <- "Concurrence (in interim supply)"
votes$type[votes$bill_number == "None" & str_detect(votes$description, "^Concurrence in the Report")] <- "Concurrence (in a report)"
norm_vec <- function(x) {
sqrt(sum(x^2))
}
euclidean <- function(x,y){
sqrt(sum((x-y)^2))
}
cosine <- fuction(x,y){
x/norm_vec(x) %*% y/norm_vec(y)
}
x <- c(1,0,1)
y <- c(1,0,1)
euclidean(x,y)
norm_vec <- function(x) {
sqrt(sum(x^2))
}
euclidean <- function(x,y){
sqrt(sum((x-y)^2))
}
cosine <- fuction(x,y){
x/norm_vec(x) %*% y/norm_vec(y)
}
x <- c(1,0,1)
y <- c(1,0,1)
euclidean(x,y)
cosine(x,y)
norm_vec <- function(x) {
sqrt(sum(x^2))
}
euclidean <- function(x,y){
sqrt(sum((x-y)^2))
}
cosine <- fuction(x,y){
x/norm_vec(x) %*% y/norm_vec(y)
}
x <- c(1,0,1)
y <- c(1,0,1)
euclidean(x,y)
cosine(x,y)
norm_vec <- function(x) {
sqrt(sum(x^2))
}
euclidean <- function(x,y) {
sqrt(sum((x-y)^2))
}
cosine <- fuction(x,y) {
x/norm_vec(x) %*% y/norm_vec(y)
}
x <- c(1,0,1)
y <- c(1,0,1)
euclidean(x,y)
cosine(x,y)
norm_vec <- function(x) {
sqrt(sum(x^2))
}
euclidean <- function(x,y) {
sqrt(sum((x-y)^2))
}
cosine <- function(x,y) {
x/norm_vec(x) %*% y/norm_vec(y)
}
x <- c(1,0,1)
y <- c(1,0,1)
euclidean(x,y)
cosine(x,y)
norm_vec <- function(x) {
sqrt(sum(x^2))
}
euclidean <- function(x,y) {
sqrt(sum((x-y)^2))
}
cosine <- function(x,y) {
(x/norm_vec(x)) %*% (y/norm_vec(y))
}
x <- c(1,0,1)
y <- c(1,0,1)
euclidean(x,y)
cosine(x,y)
norm_vec <- function(x) {
sqrt(sum(x^2))
}
euclidean <- function(x,y) {
sqrt(sum((x-y)^2))
}
cosine <- function(x,y) {
(x/norm_vec(x)) %*% (y/norm_vec(y))
}
x <- c(1,0,1)
y <- c(1/2,0,1/2)
euclidean(x,y)
cosine(x,y)
#######################
# set working directory
# load data
# and load libraries
#######################
# remove objects
rm(list=ls())
# detach all libraries
detachAllPackages <- function() {
basic.packages <- c("package:stats","package:graphics","package:grDevices","package:utils","package:datasets","package:methods","package:base")
package.list <- search()[ifelse(unlist(gregexpr("package:",search()))==1,TRUE,FALSE)]
package.list <- setdiff(package.list,basic.packages)
if (length(package.list)>0)  for (package in package.list) detach(package, character.only=TRUE)
}
detachAllPackages()
# Jeff wd
setwd('~/Documents/GitHub/CompLegFall2019/data/canadaTextParsing/Examples/')
# load libraries
pkgTest <- function(pkg){
new.pkg <- pkg[!(pkg %in% installed.packages()[, "Package"])]
if (length(new.pkg))
install.packages(new.pkg, dependencies = TRUE)
sapply(pkg, require, character.only = TRUE)
}
lapply(c("quanteda", "stringr", "tm"), pkgTest)
# load speeches data from 38th parliament
speechesDF <- read.csv("canada_floor_speeches.csv", stringsAsFactors = F, encoding = "UTF-8")
###################################
# create function to clean speeches
# to create DTM
###################################
clean_text <- function(inputVec){
# lowercase
tempVec <- tolower(inputVec)
# remove everything that is not a number or letter
tempVec <- str_replace_all(tempVec,"[^a-zA-Z\\s]", " ")
# make sure all spaces are just one white space
tempVec <- str_replace_all(tempVec,"[\\s]+", " ")
# remove blank words
tempVec <- tempVec[which(tempVec!="")]
#browser()
# tokenize (split on each word)
tempVec <- str_split(tempVec, " ")[[1]]
# create function for removing stop words
remove_words <- function(str, stopwords) {
x <- unlist(strsplit(str, " "))
x <- x[!x %in% stopwords]
# remove single letter words
return(x[nchar(x) > 1])
}
# remove stop words
tempVec <- remove_words(tempVec, stopwords("english"))
# get count of each word in "document"
count_df <- data.frame(document=row,
count=rle(sort(tempVec))[[1]],
word=rle(sort(tempVec))[[2]])
return(count_df)
}
# create new vector that we will continuously append via rbind
# probably not the most computationally efficient way to do this...
all_words <- NULL
# loop over all rows in original DF of speeches
for(row in 1:dim(speechesDF)[1]){
all_words <- rbind(all_words, clean_text(speechesDF[row, "paragraph_text"]))
}
# find unique words in word matrix
unique(all_words$word)
# there are 676 unique words in corpus
###################################
# create open DTM filled w/ zeroes
###################################
DTM <- matrix(0, nrow=dim(speechesDF)[1], ncol=length(unique(all_words$word)))
# assign column names of DTM to be the unique words (in alpha order)
colnames(DTM) <- unique(all_words$word)
# loop over each "document"/paragraph
for(document in 1:dim(speechesDF)[1]){
# find all the words that are used in that paragraph
document_subset <- all_words[which(all_words$document==document),]
# loop over each word
for(row in 1:dim(document_subset)[1]){
# and check which column it's in
DTM[document, which(colnames(DTM)==document_subset[row, "word"] )] <- all_words[row, "count"]
}
}
# compare how we did
# first look at DTM for 50th observation
which(DTM[50,]>0)
speechesDF[50,"paragraph_text"]
##################################
# Doing this all using library(tm)
##################################
# create new corpus object with tm
speech_corpus <- Corpus(VectorSource(speechesDF$paragraph_text))
# clean corpus as we did before
speech_corpus <- tm_map(speech_corpus, content_transformer(tolower))
speech_corpus <- tm_map(speech_corpus, removeNumbers)
speech_corpus <- tm_map(speech_corpus, removePunctuation)
speech_corpus <- tm_map(speech_corpus, removeWords, c("the", "and", stopwords("english")))
speech_corpus <- tm_map(speech_corpus, stripWhitespace)
# create DTM
alternative_DTM <- DocumentTermMatrix(speech_corpus)
# check to see what it looks like
inspect(alternative_DTM[1:50, 1:50])
cosine <- function(x,y) {
sum(x/norm_vec(x)) %*% (y/norm_vec(y))
}
x <- c(1,0,1)
y <- c(1/2,0,1/2)
euclidean(x,y)
cosine(x,y)
norm_vec <- function(x) {
sqrt(sum(x^2))
}
euclidean <- function(x,y) {
sqrt(sum((x-y)^2))
}
cosine <- function(x,y) {
sum(x/norm_vec(x)) %*% (y/norm_vec(y))
}
x <- c(1,0,1)
y <- c(1/2,0,1/2)
euclidean(x,y)
cosine(x,y)
norm_vec <- function(x) {
sqrt(sum(x^2))
}
euclidean <- function(x,y) {
sqrt(sum((x-y)^2))
}
cosine <- function(x,y) {
(x/norm_vec(x)) %*% (y/norm_vec(y))
}
x <- c(1,0,1)
y <- c(1/2,0,1/2)
euclidean(x,y)
cosine(x,y)
