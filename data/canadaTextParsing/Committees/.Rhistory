setwd('~/Documents/GitHub/CompLegFall2019/data/canadaTextParsing/Committees')
write.csv(canada_non_standing_committees, "canada_non_standing_committees.csv")
#######################
# load libraries
#######################
# remove objects
rm(list=ls())
# detach all libraries
detachAllPackages <- function() {
basic.packages <- c("package:stats","package:graphics","package:grDevices","package:utils","package:datasets","package:methods","package:base")
package.list <- search()[ifelse(unlist(gregexpr("package:",search()))==1,TRUE,FALSE)]
package.list <- setdiff(package.list,basic.packages)
if (length(package.list)>0)  for (package in package.list) detach(package, character.only=TRUE)
}
detachAllPackages()
# load libraries
pkgTest <- function(pkg){
new.pkg <- pkg[!(pkg %in% installed.packages()[, "Package"])]
if (length(new.pkg))
install.packages(new.pkg, dependencies = TRUE)
sapply(pkg, require, character.only = TRUE)
}
lapply(c("stringr", "dplyr", "plyr", "tidyverse", "rvest", "zoo", "readxl"), pkgTest)
###################################
# read in useful data in iteration
###################################
# set working directory and read in data
setwd('~/Documents/GitHub/CompLegFall2019/data/canadaTextParsing/Committees')
raw_canada_committees <- read_excel("raw_canada_committees.xlsx")
canada_non_standing_committees <- read.csv("canada_non_standing_committees.csv")
# number of non-joint committees
acronym <- canada_non_standing_committees$committee_acronym[canada_non_standing_committees$committee_type != "Joint Committees"]
x <- length(acronym)
# number of joint committees
acronym_j <- canada_non_standing_committees$committee_acronym[canada_non_standing_committees$committee_type == "Joint Committees"]
z <- length(acronym_j)
# number of sessions
parliament_number <- raw_canada_committees$parliament_number
session_number <- raw_canada_committees$session_number
number <- paste(parliament_number, session_number, sep="_") %>%
unique()
pn <- substr(number,1,2)
sn <- substr(number,4,4)
n <- paste("/Members?parl=",parliament_number,"&session=",session_number,sep="") %>%
unique()
y <- length(number)
# download through iteration
# for each committee, iteration through sessions
setwd('~/Documents/GitHub/CompLegFall2019/data/canadaTextParsing/Committees/NonStanding Committes/DateChange')
for(i in 1:x){
for (j in 1:y){
url <- paste("https://www.ourcommons.ca/Committees/en/",acronym[i], n[j], sep="")
file <- paste(acronym[i], "_", pn[j], "_", sn[j], ".html", sep="")
download.file(url, file, quiet = TRUE)
}
}
for(i in 1:z){
for (j in 1:y){
url <- paste("https://www.parl.ca/Committees/en/",acronym_j[i], n[j], sep="")
file <- paste(acronym_j[i], "_", pn[j], "_", sn[j], ".html", sep="")
download.file(url, file, quiet = TRUE)
}
}
#######################
# parse HTML function
#######################
parse_HTML <- function(file) {
# get some information from the name of the file
info <- str_split(file, "\\/|_|\\.")
info <- unlist(info)
# read html
html <- read_html(file)
# date change
dc <- html %>%
html_nodes("option") %>%
html_text()
date_change <- str_extract(dc, "[A-Z][a-z]+ [0-9]{1,2}, [0-9]{4}") %>%
na.omit()
# check
if(length(date_change) == 0) {
return(NULL)
}
# return the dataframe
out <- data.frame(committee_acronym = info[3],
parliament_number = info[4],
session_number = info[5],
date_change = date_change)
return(out)
}
#####################
# read in data
#####################
# file names
files <- list.files(pattern="*.html", full.names=TRUE, recursive=FALSE)
# parse XML
out <- alply(.data = files, .margins = 1, .fun = parse_HTML, .progress = "text", .inform = TRUE)
# stack data frames
df <- do.call("rbind", out)
####################
# raw cleaning
####################
rownames(df) <- c()
canada_non_standing_committee_date_change <- df
###############
# write csv
###############
setwd('~/Documents/GitHub/CompLegFall2019/data/canadaTextParsing/Committees')
write.csv(canada_non_standing_committee_date_change, "canada_non_standing_committee_date_change.csv")
#######################
# set working directory
# load data
# and load libraries
#######################
# remove objects
rm(list=ls())
# detach all libraries
detachAllPackages <- function() {
basic.packages <- c("package:stats","package:graphics","package:grDevices","package:utils","package:datasets","package:methods","package:base")
package.list <- search()[ifelse(unlist(gregexpr("package:",search()))==1,TRUE,FALSE)]
package.list <- setdiff(package.list,basic.packages)
if (length(package.list)>0)  for (package in package.list) detach(package, character.only=TRUE)
}
detachAllPackages()
# load libraries
pkgTest <- function(pkg){
new.pkg <- pkg[!(pkg %in% installed.packages()[, "Package"])]
if (length(new.pkg))
install.packages(new.pkg, dependencies = TRUE)
sapply(pkg, require, character.only = TRUE)
}
lapply(c("stringr", "dplyr", "plyr", "tidyverse", "rvest", "zoo","readxl"), pkgTest)
#####################
# read in data
#####################
setwd('~/Documents/GitHub/CompLegFall2019/data/canadaTextParsing/Committees')
df <- read_excel("raw_canada_subcommittees.xlsx")
df_aa <- read_excel("raw_canada_committees.xlsx")
# select from the raw data
df_a <- df %>%
select(committee_name,committee_acronym,type) %>%
distinct()
# re-arrange
df_b <- df_a[order(df_a$committee_name),]
# clean
df_b$chamber_number <- 1
df_b$committee_number <- rownames(df_b)
df_b$observation_number <- rownames(df_b)
df_b$committee_type <- df_b$type
df_b$chamber_path <- paste("/chamber-", df_b$chamber_number, sep="")
df_b$committee_path <- paste(df_b$chamber_path,"/committee-",df_b$committee_number,sep="")
df_b$observation_path <- paste(df_b$chamber_path,"/committee-",df_b$observation_number,sep="")
df_c <- df_b
x <- strsplit(df_c$committee_name, "[ ]")
df_c$super_committee_acronym <- sapply( x, "[", 3 )
df_d <- merge(x=df_c, y=df_aa, by.x="super_committee_acronym", by.y="committee_acronym")
df_d$super_committee_name <- df_d$committee_name.y
df_d$super_committee_type <- df_d$type.y
df_d$committee_name <- df_d$committee_name.x
canada_subcommittees <- df_d %>%
select(observation_path,
chamber_path,
committee_path,
observation_number,
chamber_number,
committee_number,
committee_name,
committee_acronym,
committee_type,
super_committee_acronym,
super_committee_name,
super_committee_type) %>%
unique() %>%
arrange(as.numeric(observation_number))
# output
setwd('~/Documents/GitHub/CompLegFall2019/data/canadaTextParsing/Committees')
write.csv(canada_subcommittees, "canada_subcommittees.csv")
#######################
# load libraries
#######################
# remove objects
rm(list=ls())
# detach all libraries
detachAllPackages <- function() {
basic.packages <- c("package:stats","package:graphics","package:grDevices","package:utils","package:datasets","package:methods","package:base")
package.list <- search()[ifelse(unlist(gregexpr("package:",search()))==1,TRUE,FALSE)]
package.list <- setdiff(package.list,basic.packages)
if (length(package.list)>0)  for (package in package.list) detach(package, character.only=TRUE)
}
detachAllPackages()
# load libraries
pkgTest <- function(pkg){
new.pkg <- pkg[!(pkg %in% installed.packages()[, "Package"])]
if (length(new.pkg))
install.packages(new.pkg, dependencies = TRUE)
sapply(pkg, require, character.only = TRUE)
}
lapply(c("stringr", "dplyr", "plyr", "tidyverse", "rvest", "zoo", "readxl"), pkgTest)
########################
# read in data useful
########################
# set working directory
setwd('~/Documents/GitHub/CompLegFall2019/data/canadaTextParsing/Committees')
df <- read.csv("canada_committees_date_change.csv")
###################################
# read in useful data in iteration
###################################
# change the date to the one in url
df$date_change <- gsub(",","",df$date_change)
df$dc <- as.Date(df$date_change, format="%B %d %Y")
x <- nrow(df)
# download through iteration
setwd('~/Documents/GitHub/CompLegFall2019/data/canadaTextParsing/Committees/Associate Membership')
dc <- df$dc
acronym <- df$committee_acronym
pn <- df$parliament_number
sn <- df$session_number
number <- paste("/Members?membershipon=",dc, "&parl=", pn,"&session=",sn,"&includeAssociates=True#AssociateMembers", sep="")
for(i in 1:x){
url <- paste("https://www.ourcommons.ca/Committees/en/", acronym[i], number[i], sep="")
file <- paste(acronym[i], "_", pn[i], "_", sn[i], "_", dc[i], ".html", sep="")
download.file(url, file, quiet = TRUE)
}
#######################
# parse HTML function
#######################
parse_HTML <- function(file) {
# get some information from the name of the file
info <- str_split(file, "\\/|_|\\.")
info <- unlist(info)
# read html
html <- read_html(file)
# get names of the associate members
name <- html %>%
html_nodes(".name") %>%
html_text()
# check
if (is_empty(name)) {
return(NULL)
}
# return the dataframe
out <- data.frame(committee_acronym = info[3],
parliament_number = info[4],
session_number = info[5],
date_change = info[6],
position = "Associate Member",
full_name = name)
return(out)
}
#####################
# read in data
#####################
setwd('~/Documents/GitHub/CompLegFall2019/data/canadaTextParsing/Committees/Associate Membership')
# file names
files <- list.files(pattern="*.html", full.names=TRUE, recursive=FALSE)
# parse XML
out <- alply(.data = files, .margins = 1, .fun = parse_HTML, .progress = "text", .inform = TRUE)
# stack data frames
df <- do.call("rbind", out)
raw_canada_committee_associate_membership <- df
setwd('~/Documents/GitHub/CompLegFall2019/data/canadaTextParsing/Committees')
write.csv(raw_canada_committee_associate_membership, "raw_canada_committee_associate_membership.csv")
#######################
# clean dataset
#######################
setwd('~/Documents/GitHub/CompLegFall2019/data/canadaTextParsing/Committees')
df <- read.csv("raw_canada_committee_associate_membership.csv")
df_a <- read_excel("raw_canada_committees.xlsx")
# find the full name of the committee
df_b <- merge(x=df, y=df_a, by=c("committee_acronym","parliament_number","session_number"), all.x=TRUE)
# start date
df_c <- df_b %>%
group_by(parliament_number, session_number, full_name, position) %>%
slice(which.min(date_change)) %>%
distinct()
# end date
df_d <- df_b %>%
group_by(parliament_number, session_number, full_name, position) %>%
slice(which.max(date_change)) %>%
distinct()
# form the raw dataset that would be useful later
final <- data.frame(committee_name = df_c$committee_name,
committee_acronym = df_c$committee_acronym,
parliament_number = df_c$parliament_number,
session_number = df_c$session_number,
full_name = df_c$full_name,
start_date = df_c$date_change,
end_date = df_d$date_change,
position = df_c$position)
# merge with member
# get information about member and constituency
setwd('~/Documents/GitHub/CompLegFall2019/data/canadaTextParsing')
member <- read.csv("canada_members_updated.csv")
df_e <- merge(x=final, y=member, by="full_name", all=T)
# merge with committee
# get information about committee
setwd('~/Documents/GitHub/CompLegFall2019/data/canadaTextParsing/Committees')
committee <- read.csv("canada_committees.csv")
df_f <- merge(x=df_e, y=committee, by=c("committee_name","committee_acronym"))
# select and re-arrange the raw dataset
df_g <- df_f %>%
select(parliament_number,
session_number,
chamber_number.x,
committee_number,
member_number,
committee_name,
committee_acronym,
committee_path,
full_name,
member_path,
constituency_name,
constituency_ID,
position,
start_date.x,
end_date.x)
colnames(df_g) <- c("parliament_number",
"session_number",
"chamber_number",
"committee_number",
"member_number",
"committee_name",
"committee_acronym",
"committee_ID",
"member_name",
"member_ID",
"constituency_name",
"constituency_ID",
"position",
"start_date",
"end_date")
# re-order the dataset to set observation number
df_h <- df_g[order(df_g$parliament_number, df_g$session_number, df_g$chamber_number, df_g$member_number),]
rownames(df_h) <- c()
df_h$observation_mumber <- rownames(df_h)
# final clean up
df_h$parliament_path <- paste("/parliament-", df_h$parliament_number, sep="")
df_h$chamber_path <- paste(df_h$parliament_path, "/chamber-", df_h$chamber_number, sep="")
df_h$committee_path <- paste(df_h$chamber_path, "/committee-", df_h$committee_number, sep="")
df_h$member_path <- paste(df_h$committee_path, "/member-", df_h$member_number, sep="")
df_h$observation_path <- paste(df_h$committee_path, "/member-", df_h$member_number, sep="")
# finish!
canada_committee_associate_membership <- df_h
setwd('~/Documents/GitHub/CompLegFall2019/data/canadaTextParsing/Committees')
write.csv(canada_committee_associate_membership, "canada_committee_associate_membership.csv")
#######################
# load libraries
#######################
# remove objects
rm(list=ls())
# detach all libraries
detachAllPackages <- function() {
basic.packages <- c("package:stats","package:graphics","package:grDevices","package:utils","package:datasets","package:methods","package:base")
package.list <- search()[ifelse(unlist(gregexpr("package:",search()))==1,TRUE,FALSE)]
package.list <- setdiff(package.list,basic.packages)
if (length(package.list)>0)  for (package in package.list) detach(package, character.only=TRUE)
}
detachAllPackages()
# load libraries
pkgTest <- function(pkg){
new.pkg <- pkg[!(pkg %in% installed.packages()[, "Package"])]
if (length(new.pkg))
install.packages(new.pkg, dependencies = TRUE)
sapply(pkg, require, character.only = TRUE)
}
lapply(c("stringr", "dplyr", "plyr", "tidyverse", "rvest", "zoo", "readxl"), pkgTest)
########################
# read in data useful
########################
# set working directory
setwd('~/Documents/GitHub/CompLegFall2019/data/canadaTextParsing/Committees')
df <- read.csv("canada_committees_date_change.csv")
###################################
# read in useful data in iteration
###################################
# change the date to the one in url
df$date_change <- gsub(",","",df$date_change)
df$dc <- as.Date(df$date_change, format="%B %d %Y")
x <- nrow(df)
# download through iteration
setwd('~/Documents/GitHub/CompLegFall2019/data/canadaTextParsing/Committees/Associate Membership')
dc <- df$dc
acronym <- df$committee_acronym
pn <- df$parliament_number
sn <- df$session_number
number <- paste("/Members?membershipon=",dc, "&parl=", pn,"&session=",sn,"&includeAssociates=True#AssociateMembers", sep="")
for(i in 1:x){
url <- paste("https://www.ourcommons.ca/Committees/en/", acronym[i], number[i], sep="")
file <- paste(acronym[i], "_", pn[i], "_", sn[i], "_", dc[i], ".html", sep="")
download.file(url, file, quiet = TRUE)
}
#######################
# parse HTML function
#######################
parse_HTML <- function(file) {
# get some information from the name of the file
info <- str_split(file, "\\/|_|\\.")
info <- unlist(info)
# read html
html <- read_html(file)
# get names of the associate members
name <- html %>%
html_nodes(".name") %>%
html_text()
# check
if (is_empty(name)) {
return(NULL)
}
# return the dataframe
out <- data.frame(committee_acronym = info[3],
parliament_number = info[4],
session_number = info[5],
date_change = info[6],
position = "Associate Member",
full_name = name)
return(out)
}
#####################
# read in data
#####################
setwd('~/Documents/GitHub/CompLegFall2019/data/canadaTextParsing/Committees/Associate Membership')
# file names
files <- list.files(pattern="*.html", full.names=TRUE, recursive=FALSE)
# parse XML
out <- alply(.data = files, .margins = 1, .fun = parse_HTML, .progress = "text", .inform = TRUE)
# stack data frames
df <- do.call("rbind", out)
raw_canada_committee_associate_membership <- df
setwd('~/Documents/GitHub/CompLegFall2019/data/canadaTextParsing/Committees')
write.csv(raw_canada_committee_associate_membership, "raw_canada_committee_associate_membership.csv")
#######################
# clean dataset
#######################
setwd('~/Documents/GitHub/CompLegFall2019/data/canadaTextParsing/Committees')
df <- read.csv("raw_canada_committee_associate_membership.csv")
df_a <- read_excel("raw_canada_committees.xlsx")
# find the full name of the committee
df_b <- merge(x=df, y=df_a, by=c("committee_acronym","parliament_number","session_number"), all.x=TRUE)
# start date
df_c <- df_b %>%
group_by(parliament_number, session_number, full_name, position) %>%
slice(which.min(date_change)) %>%
distinct()
# end date
df_d <- df_b %>%
group_by(parliament_number, session_number, full_name, position) %>%
slice(which.max(date_change)) %>%
distinct()
# form the raw dataset that would be useful later
final <- data.frame(committee_name = df_c$committee_name,
committee_acronym = df_c$committee_acronym,
parliament_number = df_c$parliament_number,
session_number = df_c$session_number,
full_name = df_c$full_name,
start_date = df_c$date_change,
end_date = df_d$date_change,
position = df_c$position)
# merge with member
# get information about member and constituency
setwd('~/Documents/GitHub/CompLegFall2019/data/canadaTextParsing')
member <- read.csv("canada_members_updated.csv")
df_e <- merge(x=final, y=member, by="full_name", all=T)
# merge with committee
# get information about committee
setwd('~/Documents/GitHub/CompLegFall2019/data/canadaTextParsing/Committees')
committee <- read.csv("canada_committees.csv")
df_f <- merge(x=df_e, y=committee, by=c("committee_name","committee_acronym"))
# select and re-arrange the raw dataset
df_g <- df_f %>%
select(parliament_number,
session_number,
chamber_number.x,
committee_number,
member_number,
committee_name,
committee_acronym,
committee_path,
full_name,
member_path,
constituency_name,
constituency_ID,
position,
start_date.x,
end_date.x)
colnames(df_g) <- c("parliament_number",
"session_number",
"chamber_number",
"committee_number",
"member_number",
"committee_name",
"committee_acronym",
"committee_ID",
"member_name",
"member_ID",
"constituency_name",
"constituency_ID",
"position",
"start_date",
"end_date")
# re-order the dataset to set observation number
df_h <- df_g[order(df_g$parliament_number, df_g$session_number, df_g$chamber_number, df_g$member_number),]
rownames(df_h) <- c()
df_h$observation_mumber <- rownames(df_h)
# final clean up
df_h$parliament_path <- paste("/parliament-", df_h$parliament_number, sep="")
df_h$chamber_path <- paste(df_h$parliament_path, "/chamber-", df_h$chamber_number, sep="")
df_h$committee_path <- paste(df_h$chamber_path, "/committee-", df_h$committee_number, sep="")
df_h$member_path <- paste(df_h$committee_path, "/member-", df_h$member_number, sep="")
df_h$observation_path <- paste(df_h$committee_path, "/member-", df_h$member_number, sep="")
# finish!
canada_committee_associate_membership <- df_h
setwd('~/Documents/GitHub/CompLegFall2019/data/canadaTextParsing/Committees')
write.csv(canada_committee_associate_membership, "canada_committee_associate_membership.csv")
