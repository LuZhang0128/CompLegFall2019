# drop text
questions$text <- NULL
# question ID
questions$question_ID <- str_extract(questions$question_text, "@@@(HL)?[0-9]{3,}@@@")
questions$question_ID <- str_replace_all(questions$question_ID, "@@@", "")
questions$question_ID <- str_trim(questions$question_ID)
# house
questions$house <- "House of Commons"
questions$house[str_detect(questions$question_ID, "HL")] <- "House of Lords"
# fix question ID
questions$question_ID <- as.numeric(str_extract(questions$question_ID, "[0-9]+"))
# question date
questions$question_date <- str_extract(questions$question_text, "@@@Asked on: [0-9]+ [A-Z][a-z]+ [0-9]+@@@")
questions$question_date <- str_replace_all(questions$question_date, "Asked on:", "")
questions$question_date <- str_replace_all(questions$question_date, "@@@", "")
questions$question_date <- str_trim(questions$question_date)
questions$question_date <- dmy(questions$question_date)
# answer date
questions$answer_date <- str_extract(questions$answer_text, "@@@Answered on:@@@[0-9]+ [A-Z][a-z]+ [0-9]+@@@")
questions$answer_date <- str_replace_all(questions$answer_date, "@@@Answered on:@@@", "")
questions$answer_date <- str_replace_all(questions$answer_date, "@@@", "")
questions$answer_date <- str_trim(questions$answer_date)
questions$answer_date <- dmy(questions$answer_date)
# arrange
questions <- arrange(questions, question_date, answer_date, house, question_ID)
# key ID
questions$key_ID <- 1:nrow(questions)
table(is.na(questions))
# stack
questions <- do.call("rbind", out)
# drop row names
row.names(questions) <- NULL
##################################################
# clean variables
##################################################
# clean text
questions$text <- str_replace_all(questions$text, "[[:space:]]+", " ")
# question text
questions$question_text <- questions$text
questions$question_text <- str_replace(questions$question_text, "@@@A@@@.*", "")
# answer text
questions$answer_text <- str_extract(questions$text, "@@@A@@@.*")
# drop text
questions$text <- NULL
# question ID
questions$question_ID <- str_extract(questions$question_text, "@@@(HL)?[0-9]{3,}@@@")
questions$question_ID <- str_replace_all(questions$question_ID, "@@@", "")
questions$question_ID <- str_trim(questions$question_ID)
# house
questions$house <- "House of Commons"
questions$house[str_detect(questions$question_ID, "HL")] <- "House of Lords"
# fix question ID
questions$question_ID <- as.numeric(str_extract(questions$question_ID, "[0-9]+"))
# question date
questions$question_date <- str_extract(questions$question_text, "@@@Asked on: [0-9]+ [A-Z][a-z]+ [0-9]+@@@")
questions$question_date <- str_replace_all(questions$question_date, "Asked on:", "")
questions$question_date <- str_replace_all(questions$question_date, "@@@", "")
questions$question_date <- str_trim(questions$question_date)
questions$question_date <- dmy(questions$question_date)
# answer date
questions$answer_date <- str_extract(questions$answer_text, "@@@Answered on:@@@[0-9]+ [A-Z][a-z]+ [0-9]+@@@")
questions$answer_date <- str_replace_all(questions$answer_date, "@@@Answered on:@@@", "")
questions$answer_date <- str_replace_all(questions$answer_date, "@@@", "")
questions$answer_date <- str_trim(questions$answer_date)
questions$answer_date <- dmy(questions$answer_date)
quest
# arrange
questions <- arrange(questions, question_date, answer_date, house, question_ID)
# key ID
questions$key_ID <- 1:nrow(questions)
names(questions)
questions$answer_text
questions$answer_text[1]
# answered by
questions$asked_by <- str_extract(questions$question_text, "@@@Answered by:@@@Lord Ahmad of Wimbledon@@@")
# asked by
questions$asked_by <- str_extract(questions$question_text, "@@@Asked by.*?@@@")
questions$asked_by <- str_replace_all(questions$asked_by, "Asked by", "")
questions$asked_by <- str_replace_all(questions$asked_by, "@@@", "")
questions$asked_by <- str_trim(questions$asked_by)
# answered by
questions$answered_by <- str_extract(questions$question_text, "@@@Answered by:@@@Lord Ahmad of Wimbledon@@@")
# answered by
questions$answered_by <- str_extract(questions$question_text, "@@@Answered by:@@@Lord Ahmad of Wimbledon@@@")
questions$answered_by <- str_replace_all(questions$answered_by, "@@@Answered by:@@@", "")
questions$answered_by <- str_replace_all(questions$answered_by, "@@@", "")
questions$answered_by <- str_trim(questions$answered_by)
head(questions$answered_by)
# answered by
questions$answered_by <- str_extract(questions$question_text, "@@@Answered by:@@@.*?@@@")
questions$answered_by <- str_replace_all(questions$answered_by, "@@@Answered by:@@@", "")
questions$answered_by <- str_replace_all(questions$answered_by, "@@@", "")
questions$answered_by <- str_trim(questions$answered_by)
head(questions$answered_by)
# answered by
questions$answered_by <- str_extract(questions$question_text, "@@@Answered by:@@@.*?@@@")
# answered by
questions$answered_by <- str_extract(questions$answer_text, "@@@Answered by:@@@.*?@@@")
questions$answered_by <- str_replace_all(questions$answered_by, "@@@Answered by:@@@", "")
questions$answered_by <- str_replace_all(questions$answered_by, "@@@", "")
questions$answered_by <- str_trim(questions$answered_by)
head(questions$answered_by)
# constituency
questions$constituency <- str_extract(questions$question_text, "@@@(.*?)@@@")
# constituency
questions$constituency <- str_extract(questions$question_text, "@@@(.*?)@@@")
questions$constituency <- str_replace_all(questions$constituency, "\\(|\\)", "")
questions$constituency <- str_replace_all(questions$constituency, "@@@", "")
questions$constituency <- str_trim(questions$constituency)
questions$constituency[questions$house == "House of Lords"] <- "Not applicable"
# constituency
questions$constituency <- str_extract(questions$question_text, "@@@\\(.*?\\)@@@")
questions$constituency <- str_replace_all(questions$constituency, "\\(|\\)", "")
questions$constituency <- str_replace_all(questions$constituency, "@@@", "")
questions$constituency <- str_trim(questions$constituency)
questions$constituency[questions$house == "House of Lords"] <- "Not applicable"
# set working directory
setwd("~/Dropbox/Professional/Projects/Parliaments Project/UK/Written Questions (HTML)/")
# files
files <- list.files()
# parse HTML
out <- alply(.data = files, .margins = 1, .fun = parse_html, .progress = "text", .inform = TRUE)
# stack
questions <- do.call("rbind", out)
# drop row names
row.names(questions) <- NULL
# clean text
questions$text <- str_replace_all(questions$text, "[[:space:]]+", " ")
length(unique(questions$text))
# question text
questions$question_text <- questions$text
questions$question_text <- str_replace(questions$question_text, "@@@A@@@.*", "")
# answer text
questions$answer_text <- str_extract(questions$text, "@@@A@@@.*")
# drop text
questions$text <- NULL
# question ID
questions$question_ID <- str_extract(questions$question_text, "@@@(HL)?[0-9]{3,}@@@")
questions$question_ID <- str_replace_all(questions$question_ID, "@@@", "")
questions$question_ID <- str_trim(questions$question_ID)
# house
questions$house <- "House of Commons"
questions$house[str_detect(questions$question_ID, "HL")] <- "House of Lords"
# fix question ID
questions$question_ID <- as.numeric(str_extract(questions$question_ID, "[0-9]+"))
# question date
questions$question_date <- str_extract(questions$question_text, "@@@Asked on: [0-9]+ [A-Z][a-z]+ [0-9]+@@@")
questions$question_date <- str_replace_all(questions$question_date, "Asked on:", "")
questions$question_date <- str_replace_all(questions$question_date, "@@@", "")
questions$question_date <- str_trim(questions$question_date)
questions$question_date <- dmy(questions$question_date)
# answer date
questions$answer_date <- str_extract(questions$answer_text, "@@@Answered on:@@@[0-9]+ [A-Z][a-z]+ [0-9]+@@@")
questions$answer_date <- str_replace_all(questions$answer_date, "@@@Answered on:@@@", "")
questions$answer_date <- str_replace_all(questions$answer_date, "@@@", "")
questions$answer_date <- str_trim(questions$answer_date)
questions$answer_date <- dmy(questions$answer_date)
# arrange
questions <- arrange(questions, question_date, answer_date, house, question_ID)
# key ID
questions$key_ID <- 1:nrow(questions)
# asked by
questions$asked_by <- str_extract(questions$question_text, "@@@Asked by.*?@@@")
questions$asked_by <- str_replace_all(questions$asked_by, "Asked by", "")
questions$asked_by <- str_replace_all(questions$asked_by, "@@@", "")
questions$asked_by <- str_trim(questions$asked_by)
# constituency
questions$constituency <- str_extract(questions$question_text, "@@@\\(.*?\\)@@@")
questions$constituency <- str_replace_all(questions$constituency, "\\(|\\)", "")
questions$constituency <- str_replace_all(questions$constituency, "@@@", "")
questions$constituency <- str_trim(questions$constituency)
questions$constituency[questions$house == "House of Lords"] <- "Not applicable"
# answered by
questions$answered_by <- str_extract(questions$answer_text, "@@@Answered by:@@@.*?@@@")
questions$answered_by <- str_replace_all(questions$answered_by, "@@@Answered by:@@@", "")
questions$answered_by <- str_replace_all(questions$answered_by, "@@@", "")
questions$answered_by <- str_trim(questions$answered_by)
x <- questions
x$question_text <- NULL
x$answer_text <- NULL
View(x)
questions$question_text[1]
# answering body
questions$answering_body <- str_extract(questions$question_text, "@@@Asked on: [0-9]+ [A-Z][a-z]+ [0-9]+@@@.*?@@@")
head(questions$answering_body)
questions$answering_body <- str_extract(questions$question_text, "@@@Asked on: [0-9]+ [A-Z][a-z]+ [0-9]+@@@.*?@@@")
questions$answering_body <- str_replace_all(questions$answering_body, "@@@Asked on: [0-9]+ [A-Z][a-z]+ [0-9]+@@@", "")
questions$answering_body <- str_replace_all(questions$answering_body, "@@@", "")
questions$answering_body <- str_trim(questions$answering_body)
head(questions$answering_body)
length(unique(questions$answering_body))
# corrected
questions$corrected <- as.numeric(str_detect(questions$answer$text, "Corrected answer by:"))
# corrected
questions$corrected <- as.numeric(str_detect(questions$answer_text, "Corrected answer by:"))
table(questions$corrected)
# grouped
questions$grouped <- as.numeric(str_detect(questions$answer_text, "Grouped Questions:"))
table(questions$grouped)
questions$grouped <- str_extract(questions$answer$text, "Grouped Questions:@@@.*")
questions$grouped <- str_extract(questions$answer_text, "Grouped Questions:@@@.*")
questions$named_day <- as.numeric(str_detect(questions$question_text, "Named Day"))
table(questions$named_day)
question$corrected <- NULL
# corrected
questions$correction <- as.numeric(str_detect(questions$answer_text, "Corrected answer by:"))
length(unique(questions$question_ID))
# grouped
questions$grouped <- as.numeric(str_detect(questions$answer_text, "Grouped Questions:"))
questions$question_text[1]
# cleaned question text
questions$question_text_clean <- str_extract(questions$question_text, "@@@[0-9]+@@@To ask.*")
# cleaned question text
questions$question_text_clean <- str_extract(questions$question_text, "@@@(HL)?[0-9]+@@@To ask.*")
# cleaned question text
questions$question_text_clean <- str_extract(questions$question_text, "@@@(HL)?[0-9]+@@@.*")
# cleaned question text
questions$question_text_clean <- str_extract(questions$question_text, "@@@(HL)?[0-9]+@@@.*")
questions$question_text_clean <- str_replace_all(questions$question_text_clean, "^@@@(HL)?[0-9]+@@@", " ")
head(questions$question_text_clean)
questions$question_text_clean <- str_replace_all(questions$question_text_clean, "http.*? ", " ")
questions$question_text_clean <- str_replace_all(questions$question_text_clean, "http.*? ", " ")
questions$question_text_clean <- str_replace_all(questions$question_text_clean, "[[:punct:]]+", " ")
questions$question_text_clean <- str_replace_all(questions$question_text_clean, "[|£]", " ")
questions$question_text_clean <- str_replace_all(questions$question_text_clean, "[[:digit:]]+", " ")
questions$question_text_clean <- str_replace_all(questions$question_text_clean, "[[:space:]]+", " ")
questions$question_text_clean <- str_trim(questions$question_text_clean)
questions$question_text_clean <- str_to_lower(questions$question_text_clean)
head(questions$question_text_clean)
# question word count
questions$question_word_count <- str_count(questions$question_text_clean, " ") + 1
questions$answer_text[1]
# cleaned answer text
questions$answer_text_clean <- str_extract(questions$answer_text, "@@@Answered on:@@@[0-9]+ [A-Z][a-z]+ [0-9]+@@@.*")
questions$answer_text_clean <- str_replace_all(questions$answer_text_clean, "^@@@Answered on:@@@[0-9]+ [A-Z][a-z]+ [0-9]+@@@", " ")
questions$answer_text_clean <- str_replace_all(questions$answer_text_clean, "http.*? ", " ")
questions$answer_text_clean <- str_replace_all(questions$answer_text_clean, "[[:punct:]]+", " ")
questions$answer_text_clean <- str_replace_all(questions$answer_text_clean, "[|£]", " ")
questions$answer_text_clean <- str_replace_all(questions$answer_text_clean, "[[:digit:]]+", " ")
questions$answer_text_clean <- str_replace_all(questions$answer_text_clean, "[[:space:]]+", " ")
questions$answer_text_clean <- str_trim(questions$answer_text_clean)
questions$answer_text_clean <- str_to_lower(questions$answer_text_clean)
# answer word count
questions$answer_word_count <- str_count(questions$answer_text_clean, " ") + 1
View(questions)
# cleaned answer text
questions$answer_text_clean <- str_extract(questions$answer_text, "@@@Answered on:@@@[0-9]+ [A-Z][a-z]+ [0-9]+@@@.*")
questions$answer_text_clean <- str_replace_all(questions$answer_text_clean, "^@@@Answered on:@@@[0-9]+ [A-Z][a-z]+ [0-9]+@@@", " ")
questions$answer_text_clean <- str_replace_all(questions$answer_text_clean, "@@@Grouped Questions:@@@.*", " ")
questions$answer_text_clean <- str_replace_all(questions$answer_text_clean, "http.*? ", " ")
questions$answer_text_clean <- str_replace_all(questions$answer_text_clean, "[[:punct:]]+", " ")
questions$answer_text_clean <- str_replace_all(questions$answer_text_clean, "[|£]", " ")
questions$answer_text_clean <- str_replace_all(questions$answer_text_clean, "[[:digit:]]+", " ")
questions$answer_text_clean <- str_replace_all(questions$answer_text_clean, "[[:space:]]+", " ")
questions$answer_text_clean <- str_trim(questions$answer_text_clean)
questions$answer_text_clean <- str_to_lower(questions$answer_text_clean)
# answer word count
questions$answer_word_count <- str_count(questions$answer_text_clean, " ") + 1
mean(questions$answer_word_count[questions$house == "House of Commons"])
mean(questions$answer_word_count[questions$house == "House of Lords"])
mean(questions$answer_word_count[questions$house == "House of Commons"], na.rm = TRUE)
mean(questions$answer_word_count[questions$house == "House of Lords"], na.rm = TRUE)
mean(questions$question_word_count[questions$house == "House of Commons"], na.rm = TRUE)
mean(questions$question_word_count[questions$house == "House of Lords"], na.rm = TRUE)
sum(str_detect(questions$question_word_count[questions$house == "House of Commons"], " (brexit|eu) "))
sum(str_detect(questions$question_text_clean[questions$house == "House of Commons"], " (brexit|eu) "))
sum(str_detect(questions$question_text_clean[questions$house == "House of Lords"], " (brexit|eu) "))
mean(str_detect(questions$question_text_clean[questions$house == "House of Commons"], " (brexit|eu) "))
mean(str_detect(questions$question_text_clean[questions$house == "House of Lords"], " (brexit|eu) "))
mean(str_detect(questions$question_text_clean[questions$house == "House of Commons"], " (brexit) "))
mean(str_detect(questions$question_text_clean[questions$house == "House of Lords"], " (brexit) "))
sum(str_detect(questions$question_text_clean[questions$house == "House of Commons"], " (brexit) "))
sum(str_detect(questions$question_text_clean[questions$house == "House of Lords"], " (brexit) "))
table(questions$house)
197945/37068
mean(questions$question_word_count[questions$house == "House of Commons"], na.rm = TRUE)
mean(questions$question_word_count[questions$house == "House of Lords"], na.rm = TRUE)
mean(questions$answer_word_count[questions$house == "House of Commons"], na.rm = TRUE)
mean(questions$answer_word_count[questions$house == "House of Lords"], na.rm = TRUE)
sum(str_detect(questions$question_text_clean[questions$house == "House of Commons"], " (my|i) "))
sum(str_detect(questions$question_text_clean[questions$house == "House of Lords"], " (my|i) "))
sum(str_detect(questions$question_text_clean[questions$house == "House of Commons"], " (voter) "))
sum(str_detect(questions$question_text_clean[questions$house == "House of Lords"], " (voter) "))
mean(str_detect(questions$question_text_clean[questions$house == "House of Commons"], " (my|i|voter|constituents|constituency) "))
mean(str_detect(questions$question_text_clean[questions$house == "House of Lords"], " (my|i|voter|constituents|constituency) "))
mean(str_detect(questions$question_text_clean[questions$house == "House of Commons"], " (brexit|eu|no deal) "))
mean(str_detect(questions$question_text_clean[questions$house == "House of Lords"], " (brexit|eu|no deal) "))
mean(str_detect(questions$question_text_clean[questions$house == "House of Commons"], " (brexit|no deal) "))
mean(str_detect(questions$question_text_clean[questions$house == "House of Lords"], " (brexit|no deal) "))
table(questions$named_day)
table(questions$grouped)
table(questions$correction)
# status
questions$status <- NA
questions$status[!is.na(questions$answer_date)] <- "Answered"
questions$status[str_detect(questions$question_text, "@@@Withdrawn@@@")] <- "Withdrawn"
# status
questions$status <- NA
questions$status[!is.na(questions$answer_date)] <- "Answered"
questions$status[str_detect(questions$question_text, "@@@Withdrawn@@@")] <- "Withdrawn"
# status
questions$status <- "Not answered"
questions$status[!is.na(questions$answer_date)] <- "Answered"
questions$status[str_detect(questions$question_text, "@@@Withdrawn@@@")] <- "Withdrawn"
table(questions$status)
mean(str_detect(questions$question_text_clean[questions$house == "House of Commons"], " (my|i|voter|constituents|constituency) "))
table(questions$status)
table(is.na(questions$answer_text))
1044+417
table(is.na(questions$answer_word_count))
questions$grouped[is.na(questions$answer_text)] <- 0
questions$correction[is.na(questions$answer_text)] <- 0
names(questions)
# select variables
final <- select(questions, question_ID, house, question_date, answer_date, asked_by, answered_by, answering_body, status, correction, grouped, name_day, question_text_clean, question_word_count, answer_text_clean, answer_word_count)
# select variables
final <- select(questions, question_ID, house, question_date, answer_date, asked_by, answered_by, answering_body, status, correction, grouped, named_day, question_text_clean, question_word_count, answer_text_clean, answer_word_count)
# sort
final <- arrange(final, question_date, answer_date, house, question_ID)
table(is.na(final))
1461 * 3
1461*4
1461*5
View(final)
1461 * 4
# select variables
final <- select(questions, question_ID, house, question_date, asked_by, answering_body, question_text_clean, question_word_count, correction, grouped, named_day, status, answer_date, answered_by, answer_text_clean, answer_word_count)
# sort
final <- arrange(final, question_date, answer_date, house, question_ID)
# corrected
questions$correction <- as.numeric(str_detect(questions$answer_text, "Corrected answer by:"))
# grouped
questions$grouped <- as.numeric(str_detect(questions$answer_text, "Grouped Questions:"))
# select variables
final <- select(questions, question_ID, house, question_date, asked_by, answering_body, named_day, question_text_clean, question_word_count, status, answer_date, answered_by, answer_text_clean, answer_word_count, correction, grouped)
# sort
final <- arrange(final, question_date, answer_date, house, question_ID)
1461 * 6
table(is.na(final[final$status == "Answered",]))
table(is.na(final))
9361 - 594
1461 * 6
# stack
questions <- do.call("rbind", out)
# drop row names
row.names(questions) <- NULL
# clean text
questions$text <- str_replace_all(questions$text, "[[:space:]]+", " ")
# question text
questions$question_text <- questions$text
questions$question_text <- str_replace(questions$question_text, "@@@A@@@.*", "")
# answer text
questions$answer_text <- str_extract(questions$text, "@@@A@@@.*")
# drop text
questions$text <- NULL
# question ID
questions$question_ID <- str_extract(questions$question_text, "@@@(HL)?[0-9]+@@@")
questions$question_ID <- str_replace_all(questions$question_ID, "@@@", "")
questions$question_ID <- str_trim(questions$question_ID)
# house
questions$house <- "House of Commons"
questions$house[str_detect(questions$question_ID, "HL")] <- "House of Lords"
# fix question ID
# questions$question_ID <- as.numeric(str_extract(questions$question_ID, "[0-9]+"))
# question date
questions$question_date <- str_extract(questions$question_text, "@@@Asked on: [0-9]+ [A-Z][a-z]+ [0-9]+@@@")
questions$question_date <- str_replace_all(questions$question_date, "Asked on:", "")
questions$question_date <- str_replace_all(questions$question_date, "@@@", "")
questions$question_date <- str_trim(questions$question_date)
questions$question_date <- dmy(questions$question_date)
# answer date
questions$answer_date <- str_extract(questions$answer_text, "@@@Answered on:@@@[0-9]+ [A-Z][a-z]+ [0-9]+@@@")
questions$answer_date <- str_replace_all(questions$answer_date, "@@@Answered on:@@@", "")
questions$answer_date <- str_replace_all(questions$answer_date, "@@@", "")
questions$answer_date <- str_trim(questions$answer_date)
questions$answer_date <- dmy(questions$answer_date)
# arrange
questions <- arrange(questions, question_date, answer_date, house, question_ID)
# key ID
questions$key_ID <- 1:nrow(questions)
# asked by
questions$asked_by <- str_extract(questions$question_text, "@@@Asked by.*?@@@")
questions$asked_by <- str_replace_all(questions$asked_by, "Asked by", "")
questions$asked_by <- str_replace_all(questions$asked_by, "@@@", "")
questions$asked_by <- str_trim(questions$asked_by)
# constituency
questions$constituency <- str_extract(questions$question_text, "@@@\\(.*?\\)@@@")
questions$constituency <- str_replace_all(questions$constituency, "\\(|\\)", "")
questions$constituency <- str_replace_all(questions$constituency, "@@@", "")
questions$constituency <- str_trim(questions$constituency)
questions$constituency[questions$house == "House of Lords"] <- "Not applicable"
# answered by
questions$answered_by <- str_extract(questions$answer_text, "@@@Answered by:@@@.*?@@@")
questions$answered_by <- str_replace_all(questions$answered_by, "@@@Answered by:@@@", "")
questions$answered_by <- str_replace_all(questions$answered_by, "@@@", "")
questions$answered_by <- str_trim(questions$answered_by)
# answering body
questions$answering_body <- str_extract(questions$question_text, "@@@Asked on: [0-9]+ [A-Z][a-z]+ [0-9]+@@@.*?@@@")
questions$answering_body <- str_replace_all(questions$answering_body, "@@@Asked on: [0-9]+ [A-Z][a-z]+ [0-9]+@@@", "")
questions$answering_body <- str_replace_all(questions$answering_body, "@@@", "")
questions$answering_body <- str_trim(questions$answering_body)
# corrected
questions$correction <- as.numeric(str_detect(questions$answer_text, "Corrected answer by:"))
# questions$correction[is.na(questions$answer_text)] <- 0
# grouped
questions$grouped <- as.numeric(str_detect(questions$answer_text, "Grouped Questions:"))
# questions$grouped[is.na(questions$answer_text)] <- 0
# named day
questions$named_day <- as.numeric(str_detect(questions$question_text, "Named Day"))
# cleaned question text
questions$question_text_clean <- str_extract(questions$question_text, "@@@(HL)?[0-9]+@@@.*")
questions$question_text_clean <- str_replace_all(questions$question_text_clean, "^@@@(HL)?[0-9]+@@@", " ")
questions$question_text_clean <- str_replace_all(questions$question_text_clean, "http.*? ", " ")
questions$question_text_clean <- str_replace_all(questions$question_text_clean, "[[:punct:]]+", " ")
questions$question_text_clean <- str_replace_all(questions$question_text_clean, "[|£]", " ")
questions$question_text_clean <- str_replace_all(questions$question_text_clean, "[[:digit:]]+", " ")
questions$question_text_clean <- str_replace_all(questions$question_text_clean, "[[:space:]]+", " ")
questions$question_text_clean <- str_trim(questions$question_text_clean)
questions$question_text_clean <- str_to_lower(questions$question_text_clean)
# question word count
questions$question_word_count <- str_count(questions$question_text_clean, " ") + 1
# cleaned answer text
questions$answer_text_clean <- str_extract(questions$answer_text, "@@@Answered on:@@@[0-9]+ [A-Z][a-z]+ [0-9]+@@@.*")
questions$answer_text_clean <- str_replace_all(questions$answer_text_clean, "^@@@Answered on:@@@[0-9]+ [A-Z][a-z]+ [0-9]+@@@", " ")
questions$answer_text_clean <- str_replace_all(questions$answer_text_clean, "@@@Grouped Questions:@@@.*", " ")
questions$answer_text_clean <- str_replace_all(questions$answer_text_clean, "http.*? ", " ")
questions$answer_text_clean <- str_replace_all(questions$answer_text_clean, "[[:punct:]]+", " ")
questions$answer_text_clean <- str_replace_all(questions$answer_text_clean, "[|£]", " ")
questions$answer_text_clean <- str_replace_all(questions$answer_text_clean, "[[:digit:]]+", " ")
questions$answer_text_clean <- str_replace_all(questions$answer_text_clean, "[[:space:]]+", " ")
questions$answer_text_clean <- str_trim(questions$answer_text_clean)
questions$answer_text_clean <- str_to_lower(questions$answer_text_clean)
# answer word count
questions$answer_word_count <- str_count(questions$answer_text_clean, " ") + 1
# status
questions$status <- "Not answered"
questions$status[!is.na(questions$answer_date)] <- "Answered"
questions$status[str_detect(questions$question_text, "@@@Withdrawn@@@")] <- "Withdrawn"
# select variables
final <- select(questions, question_ID, house, question_date, asked_by, answering_body, named_day, question_text_clean, question_word_count, status, answer_date, answered_by, answer_text_clean, answer_word_count, correction, grouped)
# sort
final <- arrange(final, question_date, answer_date, house, question_ID)
table(is.na(final[final$status == "Answered",]))
table(is.na(final))
1461 * 6
# keep answered questions only
final <- filter(questions, status == "Answered")
# select variables
final <- select(final, question_ID, house, question_date, asked_by, answering_body, named_day, question_text_clean, question_word_count, status, answer_date, answered_by, answer_text_clean, answer_word_count, correction, grouped)
# select variables
final <- select(final, question_ID, house, question_date, asked_by, answering_body, named_day, question_text_clean, question_word_count, answer_date, answered_by, answer_text_clean, answer_word_count, correction, grouped)
# sort
final <- arrange(final, question_date, answer_date, house, question_ID)
table(is.na(final))
final$delay <- days(final$answer_date - final$question_date)
head(final$delay)
final$delay <- as.numeric(final$answer_date - final$question_date)
head(final$delay)
hist(final$delay)
mean(final$delay)
min(final$delay)
max(final$delay)
# keep answered questions only
final <- filter(questions, status == "Answered")
# select variables
final <- select(final, question_ID, house, question_date, answer_date, delay, asked_by, constituency, answered_by, answering_body, named_day, correction, grouped, question_text_clean, question_word_count, answer_text_clean, answer_word_count)
# delay
final$delay <- as.numeric(final$answer_date - final$question_date)
# keep answered questions only
final <- filter(questions, status == "Answered")
# delay
questions$delay <- as.numeric(questions$answer_date - questions$question_date)
# keep answered questions only
final <- filter(questions, status == "Answered")
# select variables
final <- select(final, question_ID, house, question_date, answer_date, delay, asked_by, constituency, answered_by, answering_body, named_day, correction, grouped, question_text_clean, question_word_count, answer_text_clean, answer_word_count)
# sort
final <- arrange(final, question_date, answer_date, house, question_ID)
x <- filter(final, delay >= 0)
mean(x$delay[x$house == "House of Commons"])
mean(x$delay[x$house == "House of Lords"])
median(x$delay[x$house == "House of Commons"])
median(x$delay[x$house == "House of Lords"])
median(x$delay[x$house == "House of Commons"])
median(x$delay[x$house == "House of Lords"])
mod <- lm(f ~ delay + house + question_word_count + named_day, final)
mod <- lm(delay ~ house + question_word_count + named_day, final)
summary(mod)
mod <- lm(answer_word_count ~ house + question_word_count + named_day, final)
summary(mod)
mod <- lm(answer_word_count ~ house + question_word_count + named_day, filter(final, delay > 0))
summary(mod)
mod <- lm(answer_word_count ~ house + question_word_count + named_day, filter(final, delay >= 0))
summary(mod)
# set working directory
setwd("~/Dropbox/Professional/Projects/Parliaments Project/UK/")
# export
write.csv(final, "UK_questions.csv", row.names = FALSE)
View(final)
mean(str_detect(questions$question_text_clean[questions$house == "House of Commons"], " (brexit|no deal) "))
mean(str_detect(questions$question_text_clean[questions$house == "House of Lords"], " (brexit|no deal) "))
table(questions$house)
sum(final$question_word_count) + sum(final$answer_word_count)
table(final$answering_body)
table(questions$house[questions$answering_body == "Department for Exiting the European Union"])
table(questions$house[questions$answering_body == "Department for Exiting the European Union"])
mean(questions$house[questions$answering_body == "Department for Exiting the European Union"] == "House of Lords")
mean(questions$house[questions$answering_body == "Department for Exiting the European Union"] == "House of Commons")
mean(questions$answering_body[questions$house == "House of Commons"] == "Department for Exiting the European Union")
mean(questions$answering_body[questions$house == "House of Lords"] == "Department for Exiting the European Union")
mean(str_detect(questions$question_text_clean[questions$house == "House of Commons"], " (brexit|no deal|eu|european union) "))
mean(str_detect(questions$question_text_clean[questions$house == "House of Lords"], " (brexit|no deal|eu|european union) "))
