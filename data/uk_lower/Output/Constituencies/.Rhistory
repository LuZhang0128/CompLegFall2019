########################
# download all csv files
########################
# create function that takes inputs of:
# (1) type: what data base do you want to access (bills, divisions, etc.)?
# (2) maxPages: this is the number of web pages the documents are stored across
# the API only lets you download 500 at a time, so you have to iterate over pages
# (3) fileName: where is the destination of the file?
# Our labelling is slightly different than the website (ex: "answeredquestions" & "Written_Responses")
download_csv <- function(type, maxPages, fileName){
for(i in 0:maxPages) {
# make URL
url <- str_c("http://lda.data.parliament.uk/", type,".csv?_pageSize=500&_page=", i, collapse = "")
# make file name
file <- str_c(getwd(), "/", fileName, "/", type, "_page_", i, ".csv", collapse = "")
# download file
# tryCatch(download.file(url, file, quiet = TRUE), error = function(e) print(paste(file, 'questions missing')))
# random delay
Sys.sleep(runif(1, 0, 0.15))
}
}
download_csv("constituencies", 7, "Constituencies")
############################
# read the download csv
# bind them together
############################
do.call_rbind_read.csv <- function(path, pattern = "*.csv") {
files = list.files(path, pattern, full.names = TRUE)
do.call(rbind, lapply(files, function(x) read.csv(x, stringsAsFactors = FALSE)))
}
df <- do.call_rbind_read.csv('~/Documents/GitHub/CompLegFall2019/data/uk_lower/Constituencies')
View(df)
###########################
# parse the dataset
###########################
# we only need the name of constituency from the original dataset
df$country <- df$gss.code[1]
###########################
# parse the dataset
###########################
# we only need the name of constituency from the original dataset
df$country <- df$gss.code[[]][1]
###########################
# parse the dataset
###########################
# we only need the name of constituency from the original dataset
df$country <- df$gss.code[][1]
###########################
# parse the dataset
###########################
# we only need the name of constituency from the original dataset
df$country <- split(df$gss.code)[1]
###########################
# parse the dataset
###########################
# we only need the name of constituency from the original dataset
df$country <- splitstr(df$gss.code)[1]
###########################
# parse the dataset
###########################
# we only need the name of constituency from the original dataset
df$country <- strsplit(df$gss.code)[1]
###########################
# parse the dataset
###########################
# we only need the name of constituency from the original dataset
df$country <- strsplit(df$gss.code,)[1]
###########################
# parse the dataset
###########################
# we only need the name of constituency from the original dataset
df$country <- substr(df$gss.code,1,2)
###########################
# parse the dataset
###########################
# we only need the name of constituency from the original dataset
df$country <- substr(df$gss.code,1,1)
?mutate
df$country[df$country=="W"] <- "Wales"
df$country[df$country=="W"] <- "Wales"
# find the country for each contituency
df$country <- substr(df$gss.code,1,1)
df$country[df$country=="W"] <- "Wales"
df$country[df$country=="E"] <- "England"
df$country[df$country=="S"] <- "Scotland"
df$country[df$country=="N"] <- "Northern Ireland"
df_a <- df %>%
select(label, country) %>%
unique()
View(df_a)
df_a <- df %>%
select(label, country) %>%
unique(label)
df_a <- df %>%
select(label, country) %>%
unique(label)
df_a <- df %>%
select(label, country) %>%
distinct(label)
View(df_a)
df_a <- df %>%
select(label, country)
View(df_a)
df_b <- df_a %>%
distinct(label)
View(df_b)
df_a <- df %>%
select(label, country) %>%
distinct()
df_a <- df %>%
select(label) %>%
distinct()
View(df_a)
df_b <- merge(df_a, df)
View(df_b)
df_b <- merge(df_a, df, by="label")
View(df_b)
df_b <- merge(df_a, df, by="label", all.x = True, all.y=False)
df_b <- merge(df_a, df, by="label", all.x = T, all.y=F)
View(df_b)
df$country <- substr(df$gss.code,1,1)
df$country[df$country=="W"] <- "Wales"
df$country[df$country=="E"] <- "England"
df$country[df$country=="S"] <- "Scotland"
df$country[df$country=="N"] <- "Northern Ireland"
df_a <- df %>%
select(label) %>%
distinct()
df_b <- merge(df_a, df, by="label", all.x = T, all.y=F)
df_b <- df_a <- df %>%
select(label,country) %>%
distinct()
View(df_b)
df_a <- df %>%
select(label) %>%
distinct()
df_b <- merge(df_a, df, by="label")
df_a <- df %>%
select(label) %>%
distinct()
df_b <- df_a <- df %>%
select(label,country) %>%
distinct()
df_c <- merge(df_a, df_b, by="label")
View(df_c)
df_b <- df_a <- df %>%
select(label,country) %>%
na.omit()
df_a <- df %>%
select(label) %>%
distinct()
df_b <- df %>%
select(label,country) %>%
na.omit()
View(df_b)
View(df_b)
df_b <- df_b[!complete.cases(df_b)]
View(df_b)
df_b <- df %>%
select(label,country)
df_b <- df_b[!complete.cases(df_b)]
df_b <- df %>%
select(label,country)
View(df_b)
View(df_b)
is.na(df_b[1][2])
is.na(df_b[1])
is.na(df_b[2])
is_empty(df$country)
is_empty(df_b[2])
is_empty(df_b[1][2])
do.call_rbind_read.csv <- function(path, pattern = "*.csv") {
files = list.files(path, pattern, full.names = TRUE)
do.call(rbind, lapply(files, function(x) read.csv(x, stringsAsFactors = FALSE, na.strings="")))
}
df <- do.call_rbind_read.csv('~/Documents/GitHub/CompLegFall2019/data/uk_lower/Constituencies')
View(df)
# find the country for each contituency
df$country <- substr(df$gss.code,1,1)
df$country[df$country=="W"] <- "Wales"
df$country[df$country=="E"] <- "England"
df$country[df$country=="S"] <- "Scotland"
df$country[df$country=="N"] <- "Northern Ireland"
df_a <- df %>%
select(label) %>%
distinct()
View(df_a)
View(df_b)
df_b <- df %>%
select(label,country) %>%
distinct()
View(df_b)
df_b <- df %>%
select(label,country) %>%
distinct() %>%
na.omit()
View(df_b)
df_c <- merge(df_a, df_b, by="label")
View(df_c)
df_c <- merge(df_a, df_b, by="label",all.x = T)
View(df_c)
View(df_c)
# all the "&" and "and" are the same. replace it
df_c$constituency_name <- gsub(&, and, df_c$label)
# all the "&" and "and" are the same. replace it
df_c$constituency_name <- gsub([&], and, df_c$label)
# all the "&" and "and" are the same. replace it
df_c$constituency_name <- gsub("&", "and", df_c$label) %>% unique()
# all the "&" and "and" are the same. replace it
df_d <- df_c %>%
gsub("&", "and", label)
# all the "&" and "and" are the same. replace it
df_d <- df_c %>%
gsub("&", "and", df_c$label)
# all the "&" and "and" are the same. replace it
df_c$constituency_name <- gsub("&", "and", df_c$label)
View(df_c)
# select label and country, keep unique terms
df$constituency_name <- gsub("&", "and", df$label)
View(df)
# select label and country, keep unique terms
df$constituency_name <- gsub("&", "and", df$label)
df_a <- df %>%
select(label) %>%
distinct()
df_b <- df %>%
select(label,country) %>%
distinct() %>%
na.omit()
df_c <- merge(df_a, df_b, by="label",all.x = T)
View(df_c)
df$constituency_name <- gsub("&", "and", df$label)
df_a <- df %>%
select(constituency_name) %>%
distinct()
df_b <- df %>%
select(constituency_name,country) %>%
distinct() %>%
na.omit()
df_c <- merge(df_a, df_b, by="label",all.x = T)
View(df_c)
df_c <- merge(df_a, df_b, by=constituency_name,all.x = T)
df_c <- merge(df_a, df_b, by="constituency_name",all.x = T)
View(df_c)
View(df_c)
#####################
# load libraries
# clear global .envir
#####################
# remove objects
rm(list=ls())
# detach all libraries
detachAllPackages <- function() {
basic.packages <- c("package:stats","package:graphics","package:grDevices","package:utils","package:datasets","package:methods","package:base")
package.list <- search()[ifelse(unlist(gregexpr("package:",search()))==1,TRUE,FALSE)]
package.list <- setdiff(package.list,basic.packages)
if (length(package.list)>0)  for (package in package.list) detach(package, character.only=TRUE)
}
detachAllPackages()
# load libraries
pkgTest <- function(pkg){
new.pkg <- pkg[!(pkg %in% installed.packages()[, "Package"])]
if (length(new.pkg))
install.packages(new.pkg, dependencies = TRUE)
sapply(pkg, require, character.only = TRUE)
}
lapply(c("stringr", "dplyr", "plyr", "tidyverse", "rvest", "zoo", "lubridate"), pkgTest)
#######################
# working directoy
#######################
setwd("~/Documents/GitHub/CompLegFall2019/data/uk_lower")
########################
# download all csv files
########################
# create function that takes inputs of:
# (1) type: what data base do you want to access (bills, divisions, etc.)?
# (2) maxPages: this is the number of web pages the documents are stored across
# the API only lets you download 500 at a time, so you have to iterate over pages
# (3) fileName: where is the destination of the file?
# Our labelling is slightly different than the website (ex: "answeredquestions" & "Written_Responses")
download_csv <- function(type, maxPages, fileName){
for(i in 0:maxPages) {
# make URL
url <- str_c("http://lda.data.parliament.uk/", type,".csv?_pageSize=500&_page=", i, collapse = "")
# make file name
file <- str_c(getwd(), "/", fileName, "/", type, "_page_", i, ".csv", collapse = "")
# download file
# tryCatch(download.file(url, file, quiet = TRUE), error = function(e) print(paste(file, 'questions missing')))
# random delay
Sys.sleep(runif(1, 0, 0.15))
}
}
download_csv("constituencies", 7, "Constituencies")
############################
# read the download csv
# bind them together
############################
do.call_rbind_read.csv <- function(path, pattern = "*.csv") {
files = list.files(path, pattern, full.names = TRUE)
do.call(rbind, lapply(files, function(x) read.csv(x, stringsAsFactors = FALSE, na.strings="")))
}
df <- do.call_rbind_read.csv('~/Documents/GitHub/CompLegFall2019/data/uk_lower/Constituencies')
###########################
# parse the dataset
###########################
# find the country for each contituency
df$country_name <- substr(df$gss.code,1,1)
df$country_name[df$country=="W"] <- "Wales"
df$country_name[df$country=="E"] <- "England"
df$country_name[df$country=="S"] <- "Scotland"
df$country_name[df$country=="N"] <- "Northern Ireland"
# select label and country
# change label to constituency name, replace & by and
# keep unique terms
df$constituency_name <- gsub("&", "and", df$label)
df_a <- df %>%
select(constituency_name) %>%
distinct()
df_b <- df %>%
select(constituency_name,country_name) %>%
distinct() %>%
na.omit()
df_c <- merge(df_a, df_b, by="constituency_name",all.x = T)
# One Member of Parliament (MP) in the House of Commons represents a single constituency.
df_c$chamber_number <- 1
df_c$chamber_name <- "House of Commons"
# A number assigned to each chamber. Assigned with constituencies sorted by name.
df_d <- df_c[order(df_a$constituency_name), ]
rownames(df_d) <- c()
df_d$constituency_number <- rownames(df_d)
# observation number is based on chamber number and constituency number
df_e <- df_d[order(as.numeric(df_b$chamber_number), as.numeric(df_b$constituency_number)), ]
rownames(df_e) <- c()
df_e$observation_number <- rownames(df_e)
# set pathes
df_e$chamber_path <- paste("/chamber-",df_c$chamber_number,sep="")
df_e$constituency_path <- paste(df_c$chamber_path,"/constituency-",df_c$constituency_number,sep="")
df_e$observation_path <- paste(df_c$chamber_path,"/constituency-",df_c$observation_number,sep="")
# TODO: we don't have the data for region rn
df_e$province_name <- NA
# re-arrange and output
uk_lower_constituencies <- df_e %>%
select(observation_path,
chamber_path,
constituency_path,
observation_number,
chamber_number,
chamber_name,
constituency_number,
constituency_name,
country_name,
province_name)
###############
# write csv
###############
setwd("~/Documents/GitHub/CompLegFall2019/data/uk_lower/Constituencies")
# write.csv(uk_lower_constituencies, "uk_lower_constituencies.csv")
#####################
# load libraries
# clear global .envir
#####################
# remove objects
rm(list=ls())
# detach all libraries
detachAllPackages <- function() {
basic.packages <- c("package:stats","package:graphics","package:grDevices","package:utils","package:datasets","package:methods","package:base")
package.list <- search()[ifelse(unlist(gregexpr("package:",search()))==1,TRUE,FALSE)]
package.list <- setdiff(package.list,basic.packages)
if (length(package.list)>0)  for (package in package.list) detach(package, character.only=TRUE)
}
detachAllPackages()
# load libraries
pkgTest <- function(pkg){
new.pkg <- pkg[!(pkg %in% installed.packages()[, "Package"])]
if (length(new.pkg))
install.packages(new.pkg, dependencies = TRUE)
sapply(pkg, require, character.only = TRUE)
}
lapply(c("stringr", "dplyr", "plyr", "tidyverse", "rvest", "zoo", "lubridate"), pkgTest)
#######################
# working directoy
#######################
setwd("~/Documents/GitHub/CompLegFall2019/data/uk_lower")
########################
# download all csv files
########################
# create function that takes inputs of:
# (1) type: what data base do you want to access (bills, divisions, etc.)?
# (2) maxPages: this is the number of web pages the documents are stored across
# the API only lets you download 500 at a time, so you have to iterate over pages
# (3) fileName: where is the destination of the file?
# Our labelling is slightly different than the website (ex: "answeredquestions" & "Written_Responses")
download_csv <- function(type, maxPages, fileName){
for(i in 0:maxPages) {
# make URL
url <- str_c("http://lda.data.parliament.uk/", type,".csv?_pageSize=500&_page=", i, collapse = "")
# make file name
file <- str_c(getwd(), "/", fileName, "/", type, "_page_", i, ".csv", collapse = "")
# download file
# tryCatch(download.file(url, file, quiet = TRUE), error = function(e) print(paste(file, 'questions missing')))
# random delay
Sys.sleep(runif(1, 0, 0.15))
}
}
download_csv("constituencies", 7, "Constituencies")
############################
# read the download csv
# bind them together
############################
do.call_rbind_read.csv <- function(path, pattern = "*.csv") {
files = list.files(path, pattern, full.names = TRUE)
do.call(rbind, lapply(files, function(x) read.csv(x, stringsAsFactors = FALSE, na.strings="")))
}
df <- do.call_rbind_read.csv('~/Documents/GitHub/CompLegFall2019/data/uk_lower/Constituencies')
###########################
# parse the dataset
###########################
# find the country for each contituency
df$country_name <- substr(df$gss.code,1,1)
df$country_name[df$country=="W"] <- "Wales"
df$country_name[df$country=="E"] <- "England"
df$country_name[df$country=="S"] <- "Scotland"
df$country_name[df$country=="N"] <- "Northern Ireland"
# select label and country
# change label to constituency name, replace & by and
# keep unique terms
df$constituency_name <- gsub("&", "and", df$label)
df_a <- df %>%
select(constituency_name) %>%
distinct()
df_b <- df %>%
select(constituency_name,country_name) %>%
distinct() %>%
na.omit()
df_c <- merge(df_a, df_b, by="constituency_name",all.x = T)
# One Member of Parliament (MP) in the House of Commons represents a single constituency.
df_c$chamber_number <- 1
df_c$chamber_name <- "House of Commons"
# A number assigned to each chamber. Assigned with constituencies sorted by name.
df_d <- df_c[order(df_a$constituency_name), ]
rownames(df_d) <- c()
df_d$constituency_number <- rownames(df_d)
View(df_d)
# observation number is based on chamber number and constituency number
df_e <- df_d[order(as.numeric(df_d$chamber_number), as.numeric(df_d$constituency_number)), ]
rownames(df_e) <- c()
df_e$observation_number <- rownames(df_e)
# set pathes
df_e$chamber_path <- paste("/chamber-",df_c$chamber_number,sep="")
df_e$constituency_path <- paste(df_c$chamber_path,"/constituency-",df_c$constituency_number,sep="")
df_e$observation_path <- paste(df_c$chamber_path,"/constituency-",df_c$observation_number,sep="")
# TODO: we don't have the data for region rn
df_e$province_name <- NA
# re-arrange and output
uk_lower_constituencies <- df_e %>%
select(observation_path,
chamber_path,
constituency_path,
observation_number,
chamber_number,
chamber_name,
constituency_number,
constituency_name,
country_name,
province_name)
View(uk_lower_constituencies)
# set pathes
df_e$chamber_path <- paste("/chamber-",df_d$chamber_number,sep="")
df_e$constituency_path <- paste(df_d$chamber_path,"/constituency-",df_d$constituency_number,sep="")
df_e$observation_path <- paste(df_d$chamber_path,"/constituency-",df_d$observation_number,sep="")
# TODO: we don't have the data for region rn
df_e$province_name <- NA
# re-arrange and output
uk_lower_constituencies <- df_e %>%
select(observation_path,
chamber_path,
constituency_path,
observation_number,
chamber_number,
chamber_name,
constituency_number,
constituency_name,
country_name,
province_name)
View(df_e)
df_e$observation_path <- paste(df_d$chamber_path,"/constituency-",df_d$observation_number,sep="")
df_e$observation_number <- rownames(df_e)
# set pathes
df_e$chamber_path <- paste("/chamber-",df_e$chamber_number,sep="")
df_e$constituency_path <- paste(df_e$chamber_path,"/constituency-",df_e$constituency_number,sep="")
df_e$observation_path <- paste(df_e$chamber_path,"/constituency-",df_e$observation_number,sep="")
View(df_e)
# TODO: we don't have the data for region rn
df_e$province_name <- NA
# re-arrange and output
uk_lower_constituencies <- df_e %>%
select(observation_path,
chamber_path,
constituency_path,
observation_number,
chamber_number,
chamber_name,
constituency_number,
constituency_name,
country_name,
province_name)
View(uk_lower_constituencies)
###############
# write csv
###############
setwd("~/Documents/GitHub/CompLegFall2019/data/uk_lower/Output/Constituencies")
write.csv(uk_lower_constituencies, "uk_lower_constituencies.csv")
